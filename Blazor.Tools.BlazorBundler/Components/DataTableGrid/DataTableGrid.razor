@*====================================================================================================
    Component Name: DataTableGrid.razor
    Created By    : Solomio S. Sisante
    Created On    : June 4, 2024
    Purpose       : To provide a reusable table grid to display any DataTable data.
===================================================================================================*@

@using Blazor.Tools.BlazorBundler.Entities
@using BlazorBootstrap
@using Blazor.Tools.BlazorBundler.Components.TableGrid
@using System.Data
@namespace Blazor.Tools.BlazorBundler.Components.DataTableGrid

<TableGrid Title="@Title" AllowCellSelection="@AllowCellSelection">
    <Blazor.Tools.BlazorBundler.Components.TableGrid.TableSource Name="@_tableSourceName" DataSource="@SelectedTable" />
    <TableNode DataSource="@_tableSourceName">
        @foreach(DataColumn column in SelectedTable.Columns)
        {
            <TableColumn DataSourceName="@_tableSourceName" FieldName="@column.ColumnName" Type="TextBox" />
        }
    </TableNode>
</TableGrid>

<Icon Name="IconName.Table" @onclick="ShowSetTargetTableModalAsync" class="text-success icon-button mb-2 cursor-pointer" title="Step 1. Set Target Table" />
@if (_targetTables != null)
{
    foreach (var targetTable in _targetTables)
    {
        if (targetTable != null && !string.IsNullOrEmpty(targetTable.DT))
        {
            //var dt = _sessionManager.DeserializeAsync<DataTable>(targetTable.DT).Result;
            @* <TableGrid DataTable="@dt" /> *@
            @* <TableGrid DataTable="@targetTable.DT" /> *@
        }
    }
}

<Icon Name="IconName.CloudUpload" Class="cursor-pointer" @onclick="UploadData" title="Upload to existing AccSol tables" />

<!-- Set Target Table Modal -->
@if (showSetTargetTableModal)
{
    <SetTargetTableModal ShowSetTargetTableModal="showSetTargetTableModal"
                         OnClose="CloseSetTargetTableModal"
                         OnSave="SaveToTargetTableAsync"
                         SelectedData="@_selectedData"
                         OnSelectedDataComb="HandleSelectedDataComb"
                         TableList="@TableList"
                         />
}

@code {
    [Parameter] public string Title { get; set; } = default!;
    [Parameter] public DataTable SelectedTable { get; set; } = default!;
    [Parameter] public bool AllowCellSelection { get; set; } = false;
    [Parameter] public List<AssemblyTable> TableList { get; set; } = default!;


    // [Inject] public ISessionTableService _sessionTableService { get; set; } = default!;
    // [Inject] public SessionTable _sessionTable { get; set; } = default!;

    private bool showSetTargetTableModal = false;
    private DataRow[] _selectedData = default!;
    private string _selectedFieldValue = string.Empty;
    //private SessionManager _sessionManager = default!;
    //private bool _isRetrieved = false;
    private TableGrid _tableGrid = default!;

    private List<TargetTable>? _targetTables;
    private string _tableSourceName = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        //_sessionManager = new SessionManager(_sessionTableService);

        // if (!_isRetrieved)
        // {
        //     await RetrieveDataFromSessionTableAsync();
        // }

        _tableGrid = new TableGrid();
        _tableSourceName = SelectedTable?.TableName + "DS";
        await base.OnParametersSetAsync();
    }

    private async Task RetrieveDataFromSessionTableAsync()
    {
        try
        {
            // _targetTables = await _sessionManager.RetrieveFromSessionTableAsync<List<TargetTable>>("_targetTables") ?? _targetTables;
            // _isRetrieved = true;

            StateHasChanged();
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: {0}", ex.Message);
        }
    }
    private void CloseSetTargetTableModal()
    {
        showSetTargetTableModal = false;
        StateHasChanged(); // Ensure UI updates to hide the modal
    }

    private async Task SaveToTargetTableAsync(List<TargetTable>? targetTables)
    {
        CloseSetTargetTableModal();

        _targetTables = targetTables;
        //await _sessionManager.SaveToSessionTableAsync("_targetTables", _targetTables, serialize: true);

        StateHasChanged(); 

        await Task.CompletedTask;
    }

    private async Task HandleSelectedDataComb(DataRow[] selectedData)
    {
        // _node.SelectedData = selectedData;
        //await _sessionManager.SaveToSessionTableAsync("_selectedData", _selectedData, serialize: true);
        // await _tableGrid.HandleSelectedDataComb(selectedData);
        // StateHasChanged(); 

        await Task.CompletedTask;
    }

    private async Task HandleFieldValueChangedAsync(string newValue)
    {
        _selectedFieldValue = newValue;
        await Task.CompletedTask;
    }

    private async Task ShowSetTargetTableModalAsync()
    {
        showSetTargetTableModal = true;
        _selectedData = await _tableGrid.ShowSetTargetTableModalAsync();

        StateHasChanged(); 
    }

    private async Task UploadData()
    {
        if (_targetTables != null)
        {
            //await _sessionTableService.UploadTableListAsync(_targetTables);

            //TODO: sol: Optionally, show a success message or handle post-upload actions
        }

        await Task.CompletedTask;
    }
}
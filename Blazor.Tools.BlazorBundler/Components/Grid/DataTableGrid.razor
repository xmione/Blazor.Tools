@*====================================================================================================
    Component Name: DataTableGrid.razor
    Created By    : Solomio S. Sisante
    Created On    : June 4, 2024
    Purpose       : To provide a reusable table grid to display any DataTable data.
===================================================================================================*@

@using Blazor.Tools.BlazorBundler.Entities
@using Blazor.Tools.BlazorBundler.Extensions
@using Blazor.Tools.BlazorBundler.Interfaces
@using BlazorBootstrap
@using System.Data

<TableGrid @ref="_tableGrid" Title="@Title" AllowCellSelection="@AllowCellSelection" 
    HiddenColumnNames="@HiddenColumnNames" HeaderNames="@HeaderNames">
    <TableSource Name="@_tableSourceName" DataSource="@SelectedTable" />
    <TableNode DataSource="@_tableSourceName">
        @foreach(DataColumn column in SelectedTable.Columns)
        {
            var isHidden = HiddenColumnNames?.Contains(column.ColumnName) ?? false;
            if (!isHidden)
            {
                <TableColumn DataSourceName="@_tableSourceName" FieldName="@column.ColumnName" Type="TextBox" />
            }
        }
    </TableNode>
</TableGrid>

<Icon Name="IconName.Table" @onclick="ShowSetTargetTableModalAsync" class="text-success icon-button mb-2 cursor-pointer" title="Step 1. Set Target Table" />
@if (_targetTables != null)
{
    foreach (var targetTable in _targetTables)
    {
        if (targetTable != null && !string.IsNullOrEmpty(targetTable.DT))
        {
            var dt = targetTable.DT.DeserializeAsync<DataTable>().Result;
            <TableGrid DataTable="@dt" /> 
        }
    }
}

<Icon Name="IconName.CloudUpload" Class="cursor-pointer" @onclick="UploadData" title="Upload to existing AccSol tables" />

<!-- Set Target Table Modal -->
@if (_showSetTargetTableModal)
{
    <SetTargetTableModal 
        Title="@Title"
        ShowSetTargetTableModal="_showSetTargetTableModal"
        OnClose="CloseSetTargetTableModal"
        OnSave="SaveToTargetTableAsync"
        SelectedData="@_selectedData"
        OnSelectedDataComb="HandleSelectedDataComb"
        SetTargetTableColumnList ="HandleSetTargetTableColumnList"
        TableList="@TableList"
        />
}

@code {
    [Parameter] public string Title { get; set; } = default!;
    [Parameter] public DataTable SelectedTable { get; set; } = default!;
    [Parameter] public bool AllowCellSelection { get; set; } = false;
    [Parameter] public List<AssemblyTable>? TableList { get; set; } = default!;
    [Parameter] public List<string> HiddenColumnNames { get; set; } = default!;
    [Parameter] public Dictionary<string, string> HeaderNames { get; set; } = default!;

    [Inject] public ISessionTableService _sessionTableService { get; set; } = default!;

    private bool _showSetTargetTableModal = false;
    private DataRow[]? _selectedData = default!;
    private string _selectedFieldValue = string.Empty;
    private SessionManager _sessionManager = SessionManager.Instance;
    private bool _isRetrieved = false;
    private TableGrid _tableGrid = default!;

    private List<TargetTable>? _targetTables;
    private string _tableSourceName = string.Empty;

    private IList<SessionItem>? _sessionItems;

    protected override async Task OnParametersSetAsync()
    {
        await InitializeVariables();
        await RetrieveDataFromSessionTableAsync();
        await base.OnParametersSetAsync();
    }

    private async Task InitializeVariables()
    {
        _tableSourceName = SelectedTable?.TableName + "DS";
        _sessionItems = new List<SessionItem>
        {
            new SessionItem()
            {
                Key = $"{Title}_selectedData", Value = _selectedData, Type = typeof(DataRow[]), Serialize = true
            },
            new SessionItem()
            {
                Key = $"{Title}_targetTables", Value = _targetTables, Type = typeof(List<TargetTable>), Serialize = true
            },
            new SessionItem()
            {
                Key = $"{Title}_tableSourceName", Value = _tableSourceName, Type = typeof(string), Serialize = true
            },
            new SessionItem()
            {
                Key = $"{Title}_showSetTargetTableModal", Value = _showSetTargetTableModal, Type = typeof(bool), Serialize = true
            }
        };

        await Task.CompletedTask;
    }

    private async Task RetrieveDataFromSessionTableAsync()
    {
        try
        {
            if (!_isRetrieved && _sessionItems != null)
            {
                _sessionItems = await _sessionManager.RetrieveSessionListAsync(_sessionItems);
                _selectedData = (DataRow[]?)_sessionItems?.FirstOrDefault(s => s.Key.Equals($"{Title}_selectedData"))?.Value;
                _targetTables = (List<TargetTable>?)_sessionItems?.FirstOrDefault(s => s.Key.Equals($"{Title}_targetTables"))?.Value;
                _showSetTargetTableModal = (bool)(_sessionItems?.FirstOrDefault(s => s.Key.Equals($"{Title}_showSetTargetTableModal"))?.Value ?? false);

                _isRetrieved = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: {0}", ex.Message);
        }

        await Task.CompletedTask;
    }

    private void CloseSetTargetTableModal()
    {
        _showSetTargetTableModal = false;
        StateHasChanged(); // Ensure UI updates to hide the modal

        _sessionManager.SaveToSessionTableAsync($"{Title}_showSetTargetTableModal", _showSetTargetTableModal, serialize: true).Wait();
    }

    private async Task SaveToTargetTableAsync(List<TargetTable>? targetTables)
    {
        CloseSetTargetTableModal();

        _targetTables = targetTables;
        await _sessionManager.SaveToSessionTableAsync($"{Title}_targetTables", _targetTables, serialize: true);

        StateHasChanged(); 

        await Task.CompletedTask;
    }

    private async Task HandleSelectedDataComb(DataRow[] selectedData)
    {
        _selectedData = selectedData;

        await _sessionManager.SaveToSessionTableAsync($"{Title}_selectedData", _selectedData, serialize: true);
        await _tableGrid.HandleSelectedDataComb(selectedData);
        
        StateHasChanged(); 

        await Task.CompletedTask;
    }
    
    private async Task HandleSetTargetTableColumnList(List<TargetTableColumn> targetTableColumnList)
    {

        await Task.CompletedTask;
    }

    private async Task HandleFieldValueChangedAsync(string newValue)
    {
        _selectedFieldValue = newValue;
        await Task.CompletedTask;
    }

    private async Task ShowSetTargetTableModalAsync()
    {
        _showSetTargetTableModal = true;
        _selectedData = await _tableGrid.ShowSetTargetTableModalAsync();
        if (_selectedData == null)
        {
            _showSetTargetTableModal = false;   
        }

        await _sessionManager.SaveToSessionTableAsync($"{Title}_selectedData", _selectedData, serialize: true);
        await _sessionManager.SaveToSessionTableAsync($"{Title}_showSetTargetTableModal", _showSetTargetTableModal, serialize: true);
        StateHasChanged(); 
    }

    private async Task UploadData()
    {
        if (_targetTables != null)
        {
            await _sessionTableService.UploadTableListAsync(_targetTables);

            //TODO: sol: Optionally, show a success message or handle post-upload actions
        }

        await Task.CompletedTask;
    }
}
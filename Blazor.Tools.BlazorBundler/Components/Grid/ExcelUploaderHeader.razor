@*====================================================================================================
    Component Name: ExcelUploaderHeader.razor
    Created By    : Solomio S. Sisante
    Created On    : June 3, 2024
    Purpose       : To provide the ExcelUploader component a Header component.
  ====================================================================================================*@

@using Blazor.Tools.BlazorBundler.Entities
@using Blazor.Tools.BlazorBundler.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime

<InputFile id="fileInput" OnChange="HandleFileUpload" accept=".xlsx" />

@code {
    [Parameter] public EventCallback<IBrowserFile> OnFileUpload { get; set; }
    [Inject] public ISessionTableService _sessionTableService { get; set; } = default!;

    private SessionManager? _sessionManager;
    private IList<SessionItem>? _sessionItems;
    private BBBrowserFile? _excelFile;
    private bool _isRetrieved;

    protected override async Task OnParametersSetAsync()
    {
        await InitializeVariables();
        await RetrieveDataFromSessionTableAsync();
        await base.OnParametersSetAsync();
    }

    private async Task InitializeVariables()
    {
        _sessionItems = new List<SessionItem>
        {
            new SessionItem()
            {
                Key = "_excelFile", Value = _excelFile, Type = typeof(BBBrowserFile), Serialize = true
            }        
        };

        _sessionManager = SessionManager.GetInstance(_sessionTableService);
        await Task.CompletedTask;
    }

    private async Task RetrieveDataFromSessionTableAsync()
    {
        try
        {
            if (!_isRetrieved && _sessionItems != null)
            {
                _sessionItems = _sessionManager?.RetrieveSessionListAsync(_sessionItems).Result;
                _excelFile = (BBBrowserFile?)_sessionItems?.FirstOrDefault(s => s.Key.Equals("_excelFile"))?.Value;

                _isRetrieved = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: {0}", ex.Message);
        }

        await Task.CompletedTask;
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var browserFile = e.File;
            _excelFile = new BBBrowserFile
                {
                    Name = browserFile.Name,
                    LastModified = browserFile.LastModified,
                    Size = browserFile.Size,
                    ContentType = browserFile.ContentType
                };

            if (_sessionManager != null)
            {
                await _sessionManager.ClearSessionAsync();
                await _sessionManager.SaveToSessionTableAsync("_excelFile", _excelFile, serialize: true);
            }

            await OnFileUpload.InvokeAsync(_excelFile);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: {0}", ex.Message);
        }
    }

}

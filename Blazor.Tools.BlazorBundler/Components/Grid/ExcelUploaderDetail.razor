@*====================================================================================================
    Component Name: ExcelUploaderDetail.razor
    Created By    : Solomio S. Sisante
    Created On    : June 3, 2024
    Purpose       : To provide the ExcelUploader component a Detail component.
  ====================================================================================================*@
@using Blazor.Tools.BlazorBundler.Components.Grid
@using Blazor.Tools.BlazorBundler.Entities
@using Blazor.Tools.BlazorBundler.Extensions
@using Blazor.Tools.BlazorBundler.Interfaces
@using BlazorBootstrap
@using System.Data
@using System.Reflection

@if (ExcelDataSet != null && ExcelDataSet.Tables.Count > 0)
{
    <div>
        <ul class="nav nav-tabs">
            @foreach (var table in ExcelDataSet.Tables.Cast<DataTable>())
            {
                <li class="nav-item">
                    <a class="cursor-pointer nav-link @(table == _selectedTable ? "active" : "")" @onclick="() => SelectTableAsync(table)">@table.TableName</a>
                </li>
            }
        </ul>

        <div class="tab-content">
            @if (_selectedTable != null)
            {
                <div class="tab-pane fade show active">
                    <h4>@_selectedTable.TableName</h4>
                    <DataTableGrid SelectedTable="@_selectedTable"
                                   AllowCellSelection="true"
                                   TableList="@_tableList" />
                </div>
            }
            else
            {
                <p>Select a table to view its data.</p>
            }
        </div>
        <div class="mt-3">
            <Icon Name="IconName.Upload" Class="cursor-pointer" @onclick="UploadData" title="Upload to new tables" />
        </div>
    </div>
}
else
{
    <p>No data available.</p>
}

@code {
    [Parameter] public DataSet? ExcelDataSet { get; set; } = default!;
    [Parameter] public ExcelProcessor ExcelProcessor { get; set; } = default!;
    [Parameter] public string ModelsAssemblyName { get; set; } = default!; //"AccSol.EF.Interfaces"
    [Parameter] public string ModelsAssemblyPath { get; set; } = default!; // @"C:\repo\AccSol\AccSol.Interfaces\bin\Debug\net8.0\AccSol.Interfaces.dll"
    [Parameter] public string ServicesAssemblyName { get; set; } = default!; //"AccSol.Services"
    [Parameter] public string ServicesAssemblyPath { get; set; } = default!; // @"C:\repo\AccSol\AccSol.Services\bin\Debug\net8.0\AccSol.Services.dll"
    [Parameter] public bool LoadAssemblyFromDLLFile { get; set; } = false;
    [Parameter] public bool IsInterface { get; set; } = false;

    // [Inject] public ICommonService<SessionTable, ISessionTable, IReportItem> _sessionTableService { get; set; } = default!;
    // [Inject] public SessionTable _sessionTable { get; set; } = default!;

    private DataTable? _selectedTable;
    private string? _selectedTableName;
    private bool _isReceived = false;
    private List<AssemblyTable>? _tableList = null;
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            Assembly? modelsAssembly = null;
            Assembly? servicesAssembly = null;

            if (LoadAssemblyFromDLLFile)
            {
                if (ModelsAssemblyPath == null)
                {
                    throw new ArgumentException("ModelsAssemblyPath is required.");
                }
                else
                {
                    modelsAssembly = ReflectionExtensions.LoadAssemblyFromDLLFile(ModelsAssemblyPath);
                }

                if (ServicesAssemblyPath == null)
                {
                    throw new ArgumentException("ServicesAssemblyPath is required.");
                }
                else
                {
                    servicesAssembly = ReflectionExtensions.LoadAssemblyFromDLLFile(ServicesAssemblyPath);
                }

            }
            else
            {
                if (ModelsAssemblyName == null)
                {
                    throw new ArgumentException("ModelsAssemblyName is required.");
                }
                else
                {
                    modelsAssembly = ReflectionExtensions.LoadAssemblyFromName(ModelsAssemblyName);
                }

                if (ServicesAssemblyName == null)
                {
                    throw new ArgumentException("ServicesAssemblyName is required.");
                }
                else
                {
                    servicesAssembly = ReflectionExtensions.LoadAssemblyFromName(ServicesAssemblyName);
                }
            }

            if (_tableList == null)
            {
                _tableList = new List<AssemblyTable>();
            }

            var interfaceNames = modelsAssembly?.GetAssemblyInterfaceNames().ToList();
            var modelsAssemblyName = ModelsAssemblyName ?? modelsAssembly?.GetName().Name ?? string.Empty;
            var servicesAssemblyName = ServicesAssemblyName ?? servicesAssembly?.GetName().Name ?? string.Empty;
            if (interfaceNames != null)
            {
                for (int i = 0; i < interfaceNames.Count(); i++)
                {
                    var iFace = interfaceNames[i];
                    var assemblyTable = new AssemblyTable()
                        {
                            ID = i + 1,
                            AssemblyName = modelsAssemblyName,
                            AssemblyPath = ModelsAssemblyPath,
                            ServiceName = servicesAssemblyName,
                            ServicePath = ServicesAssemblyPath,
                            LoadAssemblyFromDLLFile = LoadAssemblyFromDLLFile,
                            IsInterface = IsInterface,
                            TableName = iFace.Item2.Substring(1, iFace.Item2.Length - 1),
                            TypeName = iFace.Item2
                        };

                    _tableList?.Add(assemblyTable);
                }
            }


            await base.OnParametersSetAsync();

            // if (!_isReceived)
            // {
            //     await RetrieveDataFromSessionTableAsync();
            // }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: {0} \r\n StackTrace: {1}", ex.Message, ex.StackTrace);
        }

    }

    private async Task SelectTableAsync(DataTable table)
    {
        _selectedTable = table;
        _selectedTableName = table.TableName;
        //await SaveDataToSessionTableAsync();
        await Task.CompletedTask;
    }

    // private async Task RetrieveDataFromSessionTableAsync()
    // {
    //     try
    //     {
    //         var sessionManager = new SessionManager(_sessionTableService);
    //         _excelDataSet = await sessionManager.RetrieveFromSessionTableAsync<DataSet>("_excelDataSet");
    //         _selectedTable = await sessionManager.RetrieveFromSessionTableAsync<DataTable>("_selectedTable");
    //         _selectedTableName = await sessionManager.RetrieveFromSessionTableAsync<string?>("_selectedTableName");

    //         if (_selectedTable != null)
    //         {
    //             _selectedTable.TableName = _selectedTableName;
    //         }

    //         _isReceived = true;

    //         StateHasChanged();
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine("Error: {0}", ex.Message);
    //     }
    // }

    // private async Task SaveDataToSessionTableAsync()
    // {
    //     try
    //     {
    //         var sessionManager = new SessionManager(_sessionTableService);
    //         await sessionManager.SaveToSessionTableAsync("_excelDataSet", _excelDataSet, serialize: true);
    //         await sessionManager.SaveToSessionTableAsync("_selectedTable", _selectedTable, serialize: true);
    //         await sessionManager.SaveToSessionTableAsync("_selectedTableName", _selectedTableName, serialize: false);
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine("Error: {0}", ex.Message);
    //     }
    // }

    private async Task UploadData()
    {
        if (ExcelDataSet != null)
        {
            if (ExcelProcessor != null)
            {
                await ExcelProcessor.SaveDataToDatabaseAsync(ExcelDataSet);
            }

            //TODO: sol: Optionally, show a success message or handle post-upload actions
        }
    }
}

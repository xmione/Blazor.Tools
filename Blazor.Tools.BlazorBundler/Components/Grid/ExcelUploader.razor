@*====================================================================================================
    Component Name: ExcelUploader.razor
    Created By    : Solomio S. Sisante
    Created On    : June 3, 2024
    Purpose       : To have a reusable component to facilitate the uploading of Excel files.
  ====================================================================================================*@
@using Blazor.Tools.BlazorBundler.Entities
@using Blazor.Tools.BlazorBundler.Interfaces
@using System.Data
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.Forms

<div class="col-md-12">
    <div class="card-header">
        <h3>@Title</h3>
        <ExcelUploaderHeader OnFileUpload="HandleFileUpload" />
    </div>
    <div class="card-body">
        @if (_isUploaded)
        {
            <ExcelUploaderDetail
                ExcelDataSet="@_excelDataSet"
                ExcelProcessor="@_excelProcessor"
                ModelsAssemblyName="@ModelsAssemblyName"
                ModelsAssemblyPath="@ModelsAssemblyPath"
                ServicesAssemblyName="@ServicesAssemblyName"
                ServicesAssemblyPath="@ServicesAssemblyPath"
                LoadAssemblyFromDLLFile="@LoadAssemblyFromDLLFile"
                IsInterface="@IsInterface" 
            />
        }
        
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = "Upload Excel File";
    [Parameter] public string ModelsAssemblyPath { get; set; } = default!;
    [Parameter] public string ModelsAssemblyName { get; set; } = default!;
    [Parameter] public string ServicesAssemblyPath { get; set; } = default!;
    [Parameter] public string ServicesAssemblyName { get; set; } = default!;
    [Parameter] public bool LoadAssemblyFromDLLFile { get; set; } = false;
    [Parameter] public bool IsInterface { get; set; } = false;
    [Inject] private IConfiguration Configuration { get; set; } = default!;
    [Inject] public ISessionTableService _sessionTableService { get; set; } = default!;

    private bool _isUploaded = false;
    private static DataSet? _excelDataSet;
    private ExcelProcessor? _excelProcessor;
    private bool _isRetrieved = false;
    private string? _connectionString;
    private SessionManager? _sessionManager;

    private IList<SessionItem>? _sessionItems;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await InitializeVariables();
        await RetrieveDataFromSessionTableAsync();
    }

    private async Task InitializeVariables()
    {
        _connectionString = Configuration.GetConnectionString("DefaultConnection") ?? string.Empty;
        _excelProcessor = new ExcelProcessor(_connectionString);
        _sessionItems = new List<SessionItem>
        {
            new SessionItem()
            {
                Key = "_excelDataSet", Value = new DataSet(), Type = typeof(DataSet), Serialize = true
            }
        };

        _sessionManager = SessionManager.GetInstance(_sessionTableService);

        await Task.CompletedTask;
    }

    private async Task RetrieveDataFromSessionTableAsync()
    {
        try
        {
            if (!_isRetrieved && _sessionItems != null && _sessionManager != null)
            {
                _sessionItems = await _sessionManager.RetrieveSessionListAsync(_sessionItems);
                _excelDataSet = (DataSet?)_sessionItems?.FirstOrDefault(s => s.Key.Equals("_excelDataSet"))?.Value;
                _isUploaded = _excelDataSet != null;
                _isRetrieved = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: {0}", ex.Message);
        }

        await Task.CompletedTask;
    }

    private async Task HandleFileUpload(IBrowserFile file)
    {
        if (file != null)
        {
            string tempFilePath = string.Empty;
            _isUploaded = false;
            try
            {
                tempFilePath = Path.Combine(Path.GetTempPath(), file.Name);

                await using (var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024)) // Allow up to 10 MB
                {
                    await using (var fileStream = new FileStream(tempFilePath, FileMode.Create, FileAccess.Write, FileShare.ReadWrite))
                    {
                        await stream.CopyToAsync(fileStream);
                    }
                } // Dispose the stream here


                if (_excelProcessor != null && _sessionManager != null)
                {
                    _excelDataSet = await _excelProcessor.ReadExcelDataAsync(tempFilePath);
                    await _sessionManager.SaveToSessionTableAsync("_excelDataSet", _excelDataSet, serialize: true);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error processing Excel file: {ex.Message}");
            }
            finally
            {
                File.Delete(tempFilePath);
                _isUploaded = true;
            }
        }
    }

     
}

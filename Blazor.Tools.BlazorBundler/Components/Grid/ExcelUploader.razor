@*====================================================================================================
    Component Name: ExcelUploader.razor
    Created By    : Solomio S. Sisante
    Created On    : June 3, 2024
    Purpose       : To have a reusable component to facilitate the uploading of Excel files.
  ====================================================================================================*@
@using Blazor.Tools.BlazorBundler.Components.Grid
@using Blazor.Tools.BlazorBundler.Entities
@using Blazor.Tools.BlazorBundler.Interfaces
@using System.Data
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.Forms

<div class="col-md-12">
    <div class="card-header">
        <h3>@Title</h3>
        <ExcelUploaderHeader OnFileUpload="HandleFileUpload" />
    </div>
    <div class="card-body">
        <ExcelUploaderDetail 
            ExcelDataSet="@_excelDataSet" 
            ExcelProcessor="@_excelProcessor"
            ModelsAssemblyName="@ModelsAssemblyName"
            ModelsAssemblyPath="@ModelsAssemblyPath"
            LoadAssemblyFromDLLFile="@LoadAssemblyFromDLLFile"
            />
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = "Upload Excel File";
    [Parameter] public string ModelsAssemblyPath { get; set; } = default!;
    [Parameter] public string ModelsAssemblyName { get; set; } = default!;
    [Parameter] public string ServicesAssemblyPath { get; set; } = default!;
    [Parameter] public string ServicesAssemblyName { get; set; } = default!;
    [Parameter] public bool LoadAssemblyFromDLLFile { get; set; } = false;
    [Inject] private IConfiguration Configuration { get; set; } = default!;
    // [Inject] public ICommonService<SessionTable, ISessionTable, IReportItem> _sessionTableService { get; set; } = default!;
    // [Inject] public SessionTable _sessionTable { get; set; } = default!;

    private DataSet? _excelDataSet;
    private ExcelProcessor? _excelProcessor;
    private bool _isRetrieved = false;
    private string? _connectionString;
    protected override async Task OnParametersSetAsync()
    {

        _connectionString = Configuration.GetConnectionString("DefaultConnection") ?? string.Empty;
        _excelProcessor = new ExcelProcessor(_connectionString);

        // if (!_isRetrieved)
        // {
        //     await RetrieveDataFromSessionTableAsync();
        // }

        await base.OnParametersSetAsync();
    }

    private async Task HandleFileUpload(IBrowserFile file)
    {
        if (file != null)
        {
            var tempFilePath = Path.Combine(Path.GetTempPath(), file.Name);

            await using (var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024)) // Allow up to 10 MB
            {
                await using (var fileStream = new FileStream(tempFilePath, FileMode.Create, FileAccess.Write, FileShare.ReadWrite))
                {
                    await stream.CopyToAsync(fileStream);
                }
            } // Dispose the stream here

            try
            {
                if (_excelProcessor != null)
                {
                    _excelDataSet = await _excelProcessor.ReadExcelDataAsync(tempFilePath);
                    //await SaveDataToSessionTableAsync();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error processing Excel file: {ex.Message}");
            }
            finally
            {
                File.Delete(tempFilePath);
            }
        }
    }

    // private async Task RetrieveDataFromSessionTableAsync()
    // {
    //     try
    //     {
    //         var sessionManager = new SessionManager(_sessionTableService);
    //         _excelDataSet = await sessionManager.RetrieveFromSessionTableAsync<DataSet>("_excelDataSet");
    //         StateHasChanged();
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine("Error: {0}", ex.Message);
    //     }
    // }

    // private async Task SaveDataToSessionTableAsync()
    // {
    //     try
    //     {
    //         var sessionManager = new SessionManager(_sessionTableService);
    //         await sessionManager.SaveToSessionTableAsync("_excelDataSet", _excelDataSet, serialize: true);
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine("Error: {0}", ex.Message);
    //     }
    // }
}

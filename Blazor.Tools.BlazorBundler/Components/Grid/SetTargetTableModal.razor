@*====================================================================================================
    Component Name: SetTargetTableModal.razor
    Created By    : Solomio S. Sisante
    Created On    : June 5, 2024
    Purpose       : Modal dialog box for setting the target DataTable.
===================================================================================================*@

@using Blazor.Tools.BlazorBundler.Entities
@using Blazor.Tools.BlazorBundler.Extensions
@using Blazor.Tools.BlazorBundler.Interfaces
@using BlazorBootstrap
@using Microsoft.AspNetCore.Components.Web
@using System.Data;
@using System.Reflection

<PageTitle>SetTargetTableModal</PageTitle>
<div class="data-table-grid-modal @(ShowSetTargetTableModal ? "show" : "")">
    <!-- Buttons -->
    <div class="data-table-grid-modal-close-button">
        <Icon Name="IconName.CheckCircleFill" @onclick="SaveTargetTablesAsync" title="Add" />
        <Icon Name="IconName.XCircleFill" title="Close" @onclick="CloseAsync" />
    </div>
    <div class="data-table-grid-modal-content">

        <div class="row">
            <div class="col">
                <h1>Selected Data</h1>
            </div>
        </div>

        <!-- Display Selected Data -->
        @if (SelectedData != null && _pagedRowsSelectedData != null)
        {
            var pagedColumns = _pagedRowsSelectedData?.FirstOrDefault()?.Table?.Columns;
            <div class="data-table-grid-div">
                <table class="data-table-grid">
                    <thead>
                        <tr>
                            @if (pagedColumns != null)
                            {
                                @foreach (DataColumn column in pagedColumns)
                                {
                                    <td>@column.ColumnName</td>
                                }
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @if (_pagedRowsSelectedData != null) 
                        {
                            @foreach (DataRow row in _pagedRowsSelectedData)
                            {
                                <tr>
                                    @foreach (DataColumn column in row.Table.Columns)
                                    {
                                        <td>@row[column]</td>
                                    }
                                </tr>
                            }
                        }
                    </tbody>
                    
                </table>
            </div>
            <div class="pagination-container">
                <label for="_pageSizeSelectedData">Page Size:</label>
                <select id="_pageSizeSelectedData" @onchange="SelectedDataPageSizeChanged">
                    <option value=@_totalItemsSelectedData selected>@_totalItemsSelectedData</option>
                    <option value="5">5</option>
                    <option value="10">10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                    <option value="100">100</option>
                </select>
                <!-- First Page -->
                <Icon Name="IconName.ChevronDoubleLeft" @onclick="GoToFirstPage" class="pagination-icon" title="First" />

                <!-- Previous Page -->
                <Icon Name="IconName.ChevronLeft" @onclick="GoToPreviousPage" class="pagination-icon" title="Previous" />

                <!-- Next Page -->
                <Icon Name="IconName.ChevronRight" @onclick="GoToNextPage" class="pagination-icon" title="Next" />

                <!-- Last Page -->
                <Icon Name="IconName.ChevronDoubleRight" @onclick="GoToLastPage" class="pagination-icon" title="Last" />

                <!-- Go To Page -->
                <input type="number" min="1" max="@_totalPagesSelectedData" @bind="_currentPageSelectedData" />
                <Icon Name="IconName.CheckCircle" @onclick="GoToSpecifiedPage" class="pagination-go-icon" title="Go" />
            </div>
        }

        <div class="row">
            <div class="col">
                <h1>Set Target Table</h1>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label for="_uniqueField">Unique Field:</label>
                <div id="sourceField-div">
                    @if (SelectedData != null)
                    {
                        <select class="form-control" id="_uniqueField" @onchange="OnUniqueFieldValueChanged">
                            @foreach (DataColumn sourceFieldCol in SelectedData[0].Table.Columns)
                            {
                                var sourceFieldColName = sourceFieldCol.ColumnName;
                                <option value="@sourceFieldColName">@sourceFieldColName</option>
                            }
                        </select>
                    }
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label for="sourceField">Source Field:</label>
                <div id="sourceField-div">
                    @if(SelectedData != null)
                    {
                        <select class="form-control" id="sourceField" @onchange="OnSourceFieldValueChanged">
                        @foreach (DataColumn sourceFieldCol in SelectedData[0].Table.Columns)
                        {
                            var sourceFieldColName = sourceFieldCol.ColumnName;
                            <option value="@sourceFieldColName" selected="@(_selectedSourceField?.Equals(sourceFieldColName))">@sourceFieldColName</option>
                        }
                        </select>
                    }
                </div>
            </div>
            <div class="col">
                <label for="targetTable">Target Table:</label>
                <select class="form-control" id="targetTable" @onchange="OnTargetTableValueChanged">
                    @if (TableList != null)
                    { 
                        foreach (var table in TableList)
                        {
                            int id = (int)table.ID;
                            string tableName = table.TableName;
                            <option value="@id" selected="@(_selectedTableID.Equals(id))">
                                @tableName
                            </option>
                        }
                    }
                </select>
            </div>
            <div class="col">
                <label for="targetField">Target Field:</label>
                <select class="form-control" id="targetField" @onchange="OnTargetFieldChanged">
                    @{
                        var fieldValues = GetFieldValues(_selectedTableID);
                        if (fieldValues != null)
                        {
                            foreach (var field in fieldValues)
                            {
                                <option value="@field" selected="@(_selectedFieldValue?.Equals(field))">@field</option>
                            }
                        }
                    }
                </select>
            </div>
            <div class="col">
                <Icon Name="IconName.Table" @onclick="AddLookupTableAsync" class="text-success icon-button mb-2 cursor-pointer" title="Add Lookup Table" />
            </div>
            <div class="col">
                <button 
                    @onclick="AddLookupTableAsync" 
                    class="form-control cursor-pointer" 
                    title="Search Foreign Table Search Fields" 
                    value="Search Foreign Table Fields"
                    />
            </div>
            <div class="col">
                <Icon Name="IconName.PlusCircleFill" @onclick="SetTargetTableFieldAsync" class="text-success icon-button mb-2 cursor-pointer" title="Add" />
                <Icon Name="IconName.Tornado" @onclick="DataCombAsync" class="text-success icon-button mb-2 cursor-pointer" title="Data Comb" />
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label for="sourceField">Table Columns:</label>
                <table id="tableColumns-div" class="table">
                    <thead>
                        @if (_columnProperties != null)
                        {
                            <tr>
                                @foreach (var prop in _columnProperties)
                                {
                                    <th>@prop</th>
                                }
                            </tr>
                        }
                    </thead>
                    <tbody>
                        @if (_targetTableColumnList != null && _columnProperties != null)
                        {
                            @foreach (var col in _targetTableColumnList)
                            {
                                <tr>
                                    @foreach (var prop in _columnProperties)
                                    {
                                        var colProperty = col.GetProperty(prop);
                                        <td>@colProperty</td>
                                    }
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
@if (_showForeignTableSearchFieldsModal)
{
    <AddLookupTableModal 
        Tag="@_tag"
        ShowSearchFieldsModal="@_showForeignTableSearchFieldsModal" 
        OnSave="SaveSearchFieldsAsync" 
        OnClose="CloseSearchFieldsEntryModalAsync" 
        TableList="@TableList"
        />
}

@code {
    [Parameter] public string Title { get; set; } = "Sample Table";
    [Parameter] public bool ShowSetTargetTableModal { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<List<TargetTable>> OnSave { get; set; }
    [Parameter] public DataRow[]? SelectedData { get; set; } = default!;
    [Parameter] public EventCallback<DataRow[]> OnSelectedDataComb { get; set; }
    [Parameter] public EventCallback<List<TargetTableColumn>> SetTargetTableColumnList { get; set; }
    [Parameter] public List<AssemblyTable>? TableList { get; set; } = default!;

    private SessionManager _sessionManager = SessionManager.Instance;
    private string? _tag;
    private int _selectedTableID;
    private int _selectedLookupTableID;
    private string? _selectedTableValue;
    private string? _selectedLookupTableValue;
    private string? _selectedFieldValue;
    private string? _selectedPrimaryKeyFieldValue;
    private string? _selectedForeignKeyFieldValue;
    private string? _selectedSourceField;
    private string _searchQuerySelectedData = string.Empty;
    private IEnumerable<DataRow>? _filteredRowsSelectedData;
    private IEnumerable<DataRow>? _pagedRowsSelectedData;
    private int _pageSizeSelectedData = 0;
    private int _currentPageSelectedData = 1;
    private int _totalPagesSelectedData = 0;
    private int _totalItemsSelectedData = 0;
    private List<TargetTableColumn>? _targetTableColumnList;
    private List<string>? _columnProperties;
    private string? _uniqueField;
    private bool _isRetrieved = false;
    private bool _showForeignTableSearchFieldsModal = false;
    private DataTable? _searchFieldsTable;
    private IList<SessionItem>? _sessionItems;

    protected override async Task OnParametersSetAsync()
    {
        await InitializeVariables();
        await RetrieveDataFromSessionTableAsync();
        await UpdateVariablesAfterSessionRetrieval();

        await base.OnParametersSetAsync();
    }

    private async Task InitializeVariables()
    { 
        _sessionItems = new List<SessionItem>
        {
            new SessionItem()
            {
                Key = $"{Title}_selectedData", Value = SelectedData, Type = typeof(DataRow[]), Serialize = true
            },
            new SessionItem()
            {
                Key = $"{Title}_uniqueField", Value = _uniqueField, Type = typeof(string), Serialize = false
            },
            new SessionItem()
            {
                Key = $"{Title}_selectedSourceField", Value = _selectedSourceField, Type = typeof(string), Serialize = false
            },
            new SessionItem()
            {
                Key = $"{Title}_selectedTableID", Value = _selectedTableID, Type = typeof(int), Serialize = true
            },
            new SessionItem()
            {
                Key = $"{Title}_selectedTableValue", Value = _selectedTableValue, Type = typeof(string), Serialize = false
            },
            new SessionItem()
            {
                Key = $"{Title}_selectedFieldValue", Value = _selectedFieldValue, Type = typeof(string), Serialize = false
            },
            new SessionItem()
            {
                Key = $"{Title}_selectedLookupTableID", Value = _selectedLookupTableID, Type = typeof(int), Serialize = true
            },
            new SessionItem()
            {
                Key = $"{Title}_selectedLookupTableValue", Value = _selectedLookupTableValue, Type = typeof(string), Serialize = false
            },
            new SessionItem()
            {
                Key = $"{Title}_targetTableColumnList", Value = _targetTableColumnList, Type = typeof(List<TargetTableColumn>), Serialize = true
            },
            new SessionItem()
            {
                Key = $"{Title}_columnProperties", Value = _columnProperties, Type = typeof(List<string>), Serialize = true
            },
            new SessionItem()
            {
                Key = $"{Title}_showForeignTableSearchFieldsModal", Value = _showForeignTableSearchFieldsModal, Type = typeof(bool), Serialize = true
            }
        };

        _tag = $"{_selectedTableValue}-{_selectedFieldValue}";
        await Task.CompletedTask;
    }

    private async Task RetrieveDataFromSessionTableAsync()
    {
        try
        {
            if (!_isRetrieved && _sessionItems != null)
            {
                _sessionItems = await _sessionManager.RetrieveSessionListAsync(_sessionItems);
                SelectedData = (DataRow[]?)_sessionItems?.FirstOrDefault(s => s.Key.Equals($"{Title}_selectedData"))?.Value;
                _uniqueField = _sessionItems?.FirstOrDefault(s => s.Key.Equals($"{Title}_uniqueField"))?.Value?.ToString() ?? string.Empty;
                _selectedSourceField = _sessionItems?.FirstOrDefault(s => s.Key.Equals($"{Title}_selectedSourceField"))?.Value?.ToString() ?? string.Empty;
                _selectedTableID = int.TryParse(_sessionItems?.FirstOrDefault(s => s.Key.Equals($"{Title}_selectedTableID"))?.Value?.ToString(), out int selectedTableIDResult) ? selectedTableIDResult : 0;
                _selectedTableValue = _sessionItems?.FirstOrDefault(s => s.Key.Equals($"{Title}_selectedTableValue"))?.Value?.ToString() ?? string.Empty;
                _selectedFieldValue = _sessionItems?.FirstOrDefault(s => s.Key.Equals($"{Title}_selectedFieldValue"))?.Value?.ToString() ?? string.Empty;
                _selectedLookupTableID = int.TryParse(_sessionItems?.FirstOrDefault(s => s.Key.Equals($"{Title}_selectedLookupTableID"))?.Value?.ToString(), out int selectedLookupTableIDResult) ? selectedLookupTableIDResult : 0;
                _selectedLookupTableValue = _sessionItems?.FirstOrDefault(s => s.Key.Equals($"{Title}_selectedLookupTableValue"))?.Value?.ToString() ?? string.Empty;
                _targetTableColumnList = (List<TargetTableColumn>?)_sessionItems?.FirstOrDefault(s => s.Key.Equals($"{Title}_targetTableColumnList"))?.Value;
                _columnProperties = (List<string>?)_sessionItems?.FirstOrDefault(s => s.Key.Equals($"{Title}_columnProperties"))?.Value;
                _showForeignTableSearchFieldsModal = (bool)(_sessionItems?.FirstOrDefault(s => s.Key.Equals($"{Title}_showForeignTableSearchFieldsModal"))?.Value ?? false);

                _tag = $"{_selectedTableValue}-{_selectedFieldValue}"; 
                _isRetrieved = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: {0}", ex.Message);
        }

        await Task.CompletedTask;
    }

    private async Task UpdateVariablesAfterSessionRetrieval()
    {

        if (SelectedData != null)
        {
            _totalItemsSelectedData = SelectedData.Length;
            _pageSizeSelectedData = _totalItemsSelectedData;
            _filteredRowsSelectedData = ApplyFilterSelectedData();
            CalculateTotalPagesAndPagedData();

            if (_targetTableColumnList != null)
            {
                if (_targetTableColumnList.Any())
                {
                    _columnProperties = _targetTableColumnList.First().GetProperties().ToList();
                }
                else
                {
                    _columnProperties = new List<string>();
                }
            }
            else
            {
                _columnProperties = new List<string>();
            }

            // Set the initial selected value
            if (_totalItemsSelectedData > 0 && string.IsNullOrEmpty(_selectedSourceField))
            {
                _selectedSourceField = SelectedData[0].Table.Columns[0].ColumnName;
                var selectedTableValue = TableList?.FirstOrDefault();
                _selectedTableID = selectedTableValue?.ID ?? 0;
                var selectedFieldValue = GetFieldValues(_selectedTableID)?.FirstOrDefault();
                _selectedFieldValue = selectedFieldValue ?? string.Empty;

                _selectedLookupTableID = 0;
                _selectedPrimaryKeyFieldValue = _selectedFieldValue;

                _uniqueField = _selectedSourceField;
            }
        }

        await Task.CompletedTask;
    }

    private async Task OnSourceFieldValueChanged(ChangeEventArgs e)
    {
        _selectedSourceField = e?.Value?.ToString() ?? string.Empty;
        await _sessionManager.SaveToSessionTableAsync($"{Title}_selectedSourceField", _selectedSourceField);
        await Task.CompletedTask;
    }

    private async Task OnTargetTableValueChanged(ChangeEventArgs e)
    {
        // Parse selected value from int to TableEnum
        int selectedIntValue = int.Parse(e?.Value?.ToString() ?? string.Empty);
        _selectedTableID = selectedIntValue;

        _selectedTableValue = TableList?.FirstOrDefault( t => t.ID == _selectedTableID)?.TableName ?? string.Empty;

        // Reset selected field value when table value changes
        _selectedFieldValue = string.Empty;
        _tag = $"{_selectedTableValue}-{_selectedFieldValue}";

        // Handle the selected value here
        Console.WriteLine("selectedValue: {0}", _selectedTableID);

        await _sessionManager.SaveToSessionTableAsync($"{Title}_selectedTableID", _selectedTableID, serialize:true);
        await _sessionManager.SaveToSessionTableAsync($"{Title}_selectedTableValue", _selectedTableValue);
        await _sessionManager.SaveToSessionTableAsync($"{Title}_selectedFieldValue", _selectedFieldValue);

        await Task.CompletedTask;
    }

    private async Task OnSelectedLookupTableValueChanged(ChangeEventArgs e)
    {
        // Parse selected value from int to TableEnum
        int selectedIntValue = int.Parse(e?.Value?.ToString() ?? string.Empty);
        _selectedLookupTableID = selectedIntValue;
        _selectedLookupTableValue = TableList?.FirstOrDefault( t => t.ID == _selectedLookupTableID)?.TableName ?? string.Empty;

        // Reset selected field value when table value changes
        _selectedPrimaryKeyFieldValue = string.Empty;
        _tag = $"{_selectedTableValue}-{_selectedFieldValue}";

        // Handle the selected value here
        Console.WriteLine("selectedValue: {0}", _selectedLookupTableID);

        await _sessionManager.SaveToSessionTableAsync($"{Title}_selectedLookupTableID", _selectedLookupTableID, serialize: true);
        await _sessionManager.SaveToSessionTableAsync($"{Title}_selectedLookupTableValue", _selectedLookupTableValue, serialize: true);
        await Task.CompletedTask;
    }

    private async Task OnTargetFieldChanged(ChangeEventArgs e)
    {
        _selectedTableValue = TableList?.FirstOrDefault(t => t.ID == _selectedTableID)?.TableName ?? string.Empty;
        _selectedFieldValue = e?.Value?.ToString() ?? string.Empty;
        _tag = $"{_selectedTableValue}-{_selectedFieldValue}";

        await _sessionManager.SaveToSessionTableAsync($"{Title}_selectedFieldValue", _selectedFieldValue);
        await Task.CompletedTask;
    }

    private async Task OnPrimaryKeyFieldChanged(ChangeEventArgs e)
    {
        _selectedLookupTableValue = TableList?.FirstOrDefault(t => t.ID == _selectedLookupTableID)?.TableName ?? string.Empty;
        _selectedPrimaryKeyFieldValue = e?.Value?.ToString() ?? string.Empty;
        await Task.CompletedTask;
    }

    private async Task OnForeignKeyFieldChanged(ChangeEventArgs e)
    {
        _selectedLookupTableValue = TableList?.FirstOrDefault(t => t.ID == _selectedLookupTableID)?.TableName ?? string.Empty;
        _selectedForeignKeyFieldValue = e?.Value?.ToString() ?? string.Empty;
        await Task.CompletedTask;
    }

    private async Task SetTargetTableFieldAsync()
    {
        if (_targetTableColumnList == null)
        {
            _targetTableColumnList = new List<TargetTableColumn>();
        }

        var targetTableColumn = _targetTableColumnList.FirstOrDefault(s => s.SourceFieldName == _selectedSourceField)
                                ?? new TargetTableColumn();
        _selectedTableValue = TableList?.FirstOrDefault(t => t.ID == _selectedTableID)?.TableName ?? string.Empty;
        var sourceFieldName = _selectedSourceField ?? string.Empty;
        var targetTableName = _selectedTableValue ?? string.Empty;
        var targetFieldName = _selectedFieldValue ?? string.Empty;
        var checkOnTableName = _selectedLookupTableValue ?? string.Empty;

        Type dataType = typeof(object);
        if (!string.IsNullOrEmpty(_selectedSourceField) && SelectedData?.Length > 0 && SelectedData[0].Table.Columns.Contains(_selectedSourceField))
        {
            dataType = SelectedData[0][_selectedSourceField]?.GetType() ?? typeof(object);
        }

        targetTableColumn.SourceFieldName = sourceFieldName;
        targetTableColumn.TargetTableName = targetTableName;
        targetTableColumn.TargetFieldName = targetFieldName;
        targetTableColumn.CheckOnTableName = checkOnTableName;
        targetTableColumn.TargetFieldName = targetFieldName;

        targetTableColumn.DataType = dataType.Name;

        if (!_targetTableColumnList.Contains(targetTableColumn))
        {
            _targetTableColumnList.Add(targetTableColumn);
        }

        if (_targetTableColumnList != null)
        {
            if (_targetTableColumnList.Any())
            {
                _columnProperties = _targetTableColumnList.First().GetProperties().ToList();
            }
            else
            {
                _columnProperties = new List<string>();
            }
        }
        else
        {
            _columnProperties = new List<string>();
        }

        await _sessionManager.SaveToSessionTableAsync($"{Title}_targetTableColumnList", _targetTableColumnList, serialize: true);
        await _sessionManager.SaveToSessionTableAsync($"{Title}_columnProperties", _columnProperties, serialize: true);
        await SetTargetTableColumnList.InvokeAsync(_targetTableColumnList);
        StateHasChanged();
    }

    private IEnumerable<string>? GetFieldValues(int id)
    {
        var selectedTable = TableList?.FirstOrDefault(t => t.ID == id);
        var properties = selectedTable?.GetPropertyNames();

        return properties;

    }

    private IEnumerable<DataRow> ApplyFilterSelectedData()
    {
        if (string.IsNullOrWhiteSpace(_searchQuerySelectedData))
        {
            return SelectedData;
        }

        // Assuming SelectedData is DataRow[]
        return SelectedData.Where(row =>
        {
            // Check each column in the row for the search query
            foreach (DataColumn column in row.Table.Columns)
            {
                if (row[column]?.ToString()?.IndexOf(_searchQuerySelectedData, StringComparison.OrdinalIgnoreCase) >= 0)
                {
                    return true; // Return true if search query is found in any column
                }
            }
            return false; // Return false if search query is not found in any column
        });
    }

    private void ChangePage(int pageNumber)
    {
        _currentPageSelectedData = pageNumber;
        StateHasChanged(); // Refresh UI after changing page
    }

    private void SelectedDataPageSizeChanged(ChangeEventArgs e)
    {
        _pageSizeSelectedData = Convert.ToInt32(e.Value);
        _currentPageSelectedData = 1; // Reset to first page when changing page size
        CalculateTotalPagesAndPagedData();
    }

    private void CalculateTotalPagesAndPagedData()
    {
        if (_filteredRowsSelectedData != null)
        {
            _totalPagesSelectedData = (int)Math.Ceiling((double)(_filteredRowsSelectedData?.Count() ?? 0) / _pageSizeSelectedData);
            _pagedRowsSelectedData = _filteredRowsSelectedData?.Skip((_currentPageSelectedData - 1) * _pageSizeSelectedData).Take(_pageSizeSelectedData);
        }
        else
        {
            _totalPagesSelectedData = 0;
            _pagedRowsSelectedData = Enumerable.Empty<DataRow>();
        }

        StateHasChanged(); // Refresh UI after calculating pages and paged data
    }

    private void GoToFirstPage()
    {
        _currentPageSelectedData = 1;
        StateHasChanged();
    }

    private void GoToPreviousPage()
    {
        if (_currentPageSelectedData > 1)
        {
            _currentPageSelectedData--;
            StateHasChanged();
        }
    }

    private void GoToNextPage()
    {
        if (_currentPageSelectedData < _totalPagesSelectedData)
        {
            _currentPageSelectedData++;
            StateHasChanged();
        }
    }

    private void GoToLastPage()
    {
        _currentPageSelectedData = _totalPagesSelectedData;
        StateHasChanged();
    }

    private void GoToSpecifiedPage()
    {
        if (_currentPageSelectedData >= 1 && _currentPageSelectedData <= _totalPagesSelectedData)
        {
            StateHasChanged();
        }
        else
        {
            // Handle invalid page number
            // For example, display a toast message or an error message
        }
    }

    private async Task DataCombAsync()
    {
        if (SelectedData != null && SelectedData.Length > 1 && !string.IsNullOrEmpty(_uniqueField))
        {
            SelectedData = SelectedData
                .Where(row => row[_uniqueField] != DBNull.Value &&
                              row[_uniqueField] != null &&
                              !string.IsNullOrEmpty(row[_uniqueField].ToString()))
                .ToArray();  // Explicitly convert to DataRow[]


            await OnSelectedDataComb.InvokeAsync(SelectedData);
        }

        await Task.CompletedTask;

        StateHasChanged();
    }

    private async Task OnUniqueFieldValueChanged(ChangeEventArgs e)
    {
        _uniqueField = e?.Value?.ToString() ?? string.Empty;

        await _sessionManager.SaveToSessionTableAsync($"{Title}_uniqueField", _uniqueField);
        await DataCombAsync();

    }

    private async Task SaveTargetTablesAsync()
    {
        var targetTables = new List<TargetTable>();
        if (_targetTableColumnList != null)
        {
            var targetTableGroups = _targetTableColumnList?
                                    .Where(t => !string.IsNullOrEmpty(t.TargetTableName))
                                    .GroupBy(t => t.TargetTableName)
                                    .ToList();

            if (targetTableGroups != null)
            {
                foreach (var group in targetTableGroups)
                {
                    var targetTableName = group.Key;
                    var targetTableColumns = group.ToList();

                    var targetTable = new TargetTable
                        {
                            TargetTableName = targetTableName,
                            TargetTableColumns = targetTableColumns,
                        };

                    var dt = new DataTable(targetTableName);

                    // Build columns for the target DataTable
                    dt = BuildColumnsForTargetTable(dt, targetTableColumns, SelectedData);

                    // Populate rows for the target DataTable
                    dt = BuildRowsForTargetTable(dt, targetTableColumns, SelectedData);

                    // Lastly, before adding the targetTable serialize the dt again and store in targetTable.DT
                    targetTable.DT = await dt.SerializeAsync();

                    targetTables.Add(targetTable);
                }
            }
        }

        await OnSave.InvokeAsync(targetTables);    
    }

    private async Task CloseAsync()
    {
        await OnClose.InvokeAsync();    
    }

    private DataTable BuildColumnsForTargetTable(DataTable targetTable, List<TargetTableColumn> targetTableColumns, DataRow[] selectedData)
    {
        if (selectedData.Length > 0)
        {
            foreach (var targetColumn in targetTableColumns)
            {
                if (!targetTable.Columns.Contains(targetColumn.TargetFieldName))
                {
                    var columnType = selectedData[0]?.Table?.Columns[targetColumn.SourceFieldName]?.DataType;
                    if (columnType != null)
                    { 
                        var newColumn = new DataColumn(targetColumn.TargetFieldName, columnType);
                        targetTable.Columns.Add(newColumn);
                    }
                }
            }
        }

        return targetTable;
    }

    private DataTable BuildRowsForTargetTable(DataTable targetTable, List<TargetTableColumn> targetTableColumns, DataRow[] selectedData)
    {
        foreach (var selectedRow in selectedData)
        {
            var tableRow = targetTable.NewRow();

            foreach (var targetColumn in targetTableColumns)
            {
                var sourceFieldName = targetColumn.SourceFieldName;
                var targetFieldName = targetColumn.TargetFieldName;

                if (selectedRow.Table.Columns.Contains(sourceFieldName))
                {
                    tableRow[targetFieldName] = selectedRow[sourceFieldName];
                }
            }

            targetTable.Rows.Add(tableRow);
        }

        return targetTable;
    }

    private async Task AddLookupTableAsync()
    {
        _showForeignTableSearchFieldsModal = true;
        
        await _sessionManager.SaveToSessionTableAsync($"{Title}_showForeignTableSearchFieldsModal", _showForeignTableSearchFieldsModal, serialize: true);
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task SaveSearchFieldsAsync()
    {
        List<SearchField> searchFields = _searchFieldsTable?.ConvertDataTableToObjects<SearchField>() ?? default!;
        await Task.CompletedTask;
    }
    private async Task CloseSearchFieldsEntryModalAsync()
    {
        _showForeignTableSearchFieldsModal = false;
        StateHasChanged();
        await Task.CompletedTask;
    }
}

@using Blazor.Tools.BlazorBundler.Entities
@using BlazorBootstrap
@using System.Data
@using Microsoft.AspNetCore.Components.Web

<PageTitle>Search Field Entry Modal</PageTitle>
<div class="data-table-grid-modal @(ShowSearchFieldsModal ? "show" : "")">
    <!-- Buttons -->
    <div class="data-table-grid-modal-close-button">
        <Icon Name="IconName.CheckCircleFill" @onclick="SaveAsync" title="Add" />
        <Icon Name="IconName.XCircleFill" title="Close" @onclick="CloseAsync" />
    </div>
    <div class="data-table-grid-modal-content">
        <div class="row">
            <div class="col">
                <h1>Set Target Table</h1>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label for="_targetTableID">Lookup Table:</label>
                <select class="form-control" id="_targetTableID" @onchange="OnLookupTableValueChanged">
                    @if (TableList != null)
                    {
                        foreach (var table in TableList)
                        {
                            int id = (int)table.ID;
                            string tableName = table.TableName;
                            <option value="@id" selected="@(_targetTableID.Equals(id))">
                                @tableName
                            </option>
                        }
                    }
                </select>
            </div>
            <div class="col">
                <label for="_targetFieldValue">Target Field:</label>
                <select class="form-control" id="_targetFieldValue" @onchange="OnTargetFieldValueChanged">
                    @{
                        var targetfieldValues = GetFieldValues(_targetTableID);
                        if (targetfieldValues != null)
                        {
                            foreach (var field in targetfieldValues)
                            {
                                <option value="@field" selected="@(_targetFieldValue?.Equals(field))">@field</option>
                            }
                        }
                    }
                </select>
            </div>
            <div class="col">
                <label for="_targetFieldMatchConditionValue">Match Conditions:</label>
                <select class="form-control" id="_targetFieldMatchConditionValue" @onchange="OnMatchConditionsValueChanged">
                    @{
                        var targetfieldMatchConditionValues = Enum.GetValues(typeof(LookupFieldConditionEnum));
                        if (targetfieldMatchConditionValues != null)
                        {
                            foreach (var field in targetfieldMatchConditionValues)
                            {
                                <option value="@field" selected="@(_targetFieldMatchConditionValue?.Equals(field))">@field</option>
                            }
                        }
                    }
                </select>
            </div>
            <div class="col">
                <Icon Name="IconName.Floppy" Class="cursor-pointer" @onclick="SaveLookupTableItemAsync" title="Save" />
            </div>
        </div>
        <div class="row">
            <TableGrid Title="@_tableName" DataTable="@SelectedTable" />
        </div>
    </div>
</div>

@code {
    [Parameter] public bool ShowSearchFieldsModal { get; set; }
    [Parameter] public DataTable SelectedTable { get; set; } = default!;
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<List<SearchField>> OnSave { get; set; }
    [Parameter] public DataRow[]? SelectedData { get; set; } = default!;
    [Parameter] public List<AssemblyTable>? TableList { get; set; } = default!;

    private string _tableName = string.Empty;
    private int _targetTableID = default!;
    private string _targetTableValue = default!;
    private string? _targetFieldValue = default!;
    private string? _targetFieldMatchConditionValue = default!;

    protected override async Task OnParametersSetAsync()
    {

        if (SelectedTable == null)
        {
            throw new ArgumentException("SelectedTable is required.");
        }
        _tableName = SelectedTable?.TableName ?? _tableName;     
        await base.OnParametersSetAsync();
    }

    private async Task OnLookupTableValueChanged(ChangeEventArgs e)
    {
        // Parse selected value from int to TableEnum
        int targetIntValue = int.Parse(e?.Value?.ToString() ?? string.Empty);
        _targetTableID = targetIntValue;

        _targetTableValue = TableList?.FirstOrDefault(t => t.ID == _targetTableID)?.TableName ?? string.Empty;

        // Reset selected field value when table value changes
        _targetFieldValue = string.Empty;

        // Handle the selected value here
        Console.WriteLine("targetTableID: {0}", _targetTableID);

        //await _sessionManager.SaveToSessionTableAsync("_targetTableValue", _targetTableValue);

        await Task.CompletedTask;
    }

    private async Task OnTargetFieldValueChanged(ChangeEventArgs e)
    {
        _targetFieldValue = e?.Value?.ToString() ?? string.Empty;

        //await _sessionManager.SaveToSessionTableAsync("_targetFieldValue", _targetFieldValue);
        await Task.CompletedTask;
    }

    private async Task OnMatchConditionsValueChanged(ChangeEventArgs e)
    {
        _targetFieldMatchConditionValue = e?.Value?.ToString() ?? string.Empty;

        //await _sessionManager.SaveToSessionTableAsync("_targetFieldValue", _targetFieldValue);
        await Task.CompletedTask;
    }

    private IEnumerable<string>? GetFieldValues(int id)
    {
        var selectedTable = TableList?.FirstOrDefault(t => t.ID == id);
        var properties = selectedTable?.GetPropertyNames();

        return properties;

    }

    private async Task SaveLookupTableItemAsync()
    {
        var newRow = SelectedTable.NewRow();
        newRow["TableName"] = _targetTableValue;
        newRow["FieldName"] = _targetTableValue;
        newRow["MatchCondition"] = _targetFieldMatchConditionValue;

        SelectedTable.Rows.Add(newRow);

        await Task.CompletedTask; 
    }

    private async Task SaveAsync()
    {
        var targetTables = new List<SearchField>();
        // if (_targetTableColumnList != null)
        // {
        //     var targetTableGroups = _targetTableColumnList?
        //                             .Where(t => !string.IsNullOrEmpty(t.TargetTableName))
        //                             .GroupBy(t => t.TargetTableName)
        //                             .ToList();

        //     if (targetTableGroups != null)
        //     {
        //         foreach (var group in targetTableGroups)
        //         {
        //             var targetTableName = group.Key;
        //             var targetTableColumns = group.ToList();

        //             var targetTable = new TargetTable
        //                 {
        //                     TargetTableName = targetTableName,
        //                     TargetTableColumns = targetTableColumns,
        //                 };

        //             var dt = new DataTable(targetTableName);

        //             // Build columns for the target DataTable
        //             dt = BuildColumnsForTargetTable(dt, targetTableColumns, SelectedData);

        //             // Populate rows for the target DataTable
        //             dt = BuildRowsForTargetTable(dt, targetTableColumns, SelectedData);

        //             // Lastly, before adding the targetTable serialize the dt again and store in targetTable.DT
        //             targetTable.DT = await _sessionManager.SerializeAsync(dt);

        //             targetTables.Add(targetTable);
        //         }
        //     }
        // }        // if (_targetTableColumnList != null)
        // {
        //     var targetTableGroups = _targetTableColumnList?
        //                             .Where(t => !string.IsNullOrEmpty(t.TargetTableName))
        //                             .GroupBy(t => t.TargetTableName)
        //                             .ToList();

        //     if (targetTableGroups != null)
        //     {
        //         foreach (var group in targetTableGroups)
        //         {
        //             var targetTableName = group.Key;
        //             var targetTableColumns = group.ToList();

        //             var targetTable = new TargetTable
        //                 {
        //                     TargetTableName = targetTableName,
        //                     TargetTableColumns = targetTableColumns,
        //                 };

        //             var dt = new DataTable(targetTableName);

        //             // Build columns for the target DataTable
        //             dt = BuildColumnsForTargetTable(dt, targetTableColumns, SelectedData);

        //             // Populate rows for the target DataTable
        //             dt = BuildRowsForTargetTable(dt, targetTableColumns, SelectedData);

        //             // Lastly, before adding the targetTable serialize the dt again and store in targetTable.DT
        //             targetTable.DT = await _sessionManager.SerializeAsync(dt);

        //             targetTables.Add(targetTable);
        //         }
        //     }
        // }

        await OnSave.InvokeAsync(targetTables);
    }
    
    private async Task CloseAsync()
    {
        await OnClose.InvokeAsync();
    }

}

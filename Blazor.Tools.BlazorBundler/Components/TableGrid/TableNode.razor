@* TableNode.razor *@
@using System.Data
@using Microsoft.AspNetCore.Components.Rendering
@namespace Blazor.Tools.BlazorBundler.Components.TableGrid

<CascadingValue Value="@TableGridContext">
    <CascadingValue Value="@TableNodeContext">
        @ChildContent
    </CascadingValue>
</CascadingValue>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; } = default!;
    [Parameter] public string DataSource { get; set; } = default!;
    [Parameter] public bool AllowCellSelection { get; set; } = false;
    [CascadingParameter] private TableGrid TableGridContext { get; set; } = default!;

    public List<TableColumn> Columns = new List<TableColumn>();
    public TableNode TableNodeContext = default!;
    public DataTable DataTable = default!;
    public int TotalPages = 0;
    public int TotalItems = 0;
    public int FilteredItems = 0;
    public int PageSize = 0;
    public int CurrentPage = 1;
    public IEnumerable<DataRow>? FilteredRows;
    public IEnumerable<DataRow>? PagedRows;
    public string? SelectedTableName;
    public string SearchQuery = string.Empty;
    public DataRow? EditedRow = default!;
    public Dictionary<string, object> EditValues = null!;
    public bool IsEditing = false;
    public bool ShowAddRowModal = false;
    public DataRow NewRowData = default!;
    // New state variables for cell selection
    public string StartCell = string.Empty;
    public string EndCell = string.Empty;
    public bool IsFirstCellClicked = true;
    public DataRow[] SelectedData = Array.Empty<DataRow>();

    protected override void OnParametersSet()
    {
        if (TableGridContext != null)
        {
            DataTable = TableGridContext.GetDataSource(DataSource) ?? DataTable;
        }

        TotalItems = DataTable?.Rows?.Count ?? 0;
        FilteredItems = TotalItems;
        PageSize = TotalItems;
        UpdateDisplayFromPageSize();

        TableNodeContext = this;
        TableGridContext?.SetNode(TableNodeContext);
        Console.WriteLine("TableNode OnParametersSet");
    }

    public void UpdateDisplayFromPageSize()
    {
        FilteredRows = DataTable != null ? ApplyFilter() : FilteredRows;
        FilteredItems = FilteredRows.Count();
        PagedRows = FilteredRows?.Skip((CurrentPage - 1) * PageSize).Take(PageSize);
        TotalPages = (int)Math.Ceiling((double)(FilteredRows?.Count() ?? 0) / PageSize);
        SelectedTableName = DataTable?.TableName;
    }

    public void FilterData(IEnumerable<DataRow> filteredRows)
    {
        FilteredRows = filteredRows;
        FilteredItems = FilteredRows.Count();
        PagedRows = FilteredRows?.Skip((CurrentPage - 1) * PageSize).Take(PageSize);
        TotalPages = (int)Math.Ceiling((double)(FilteredRows?.Count() ?? 0) / PageSize);
        SelectedTableName = DataTable?.TableName;
    }
    private IEnumerable<DataRow> ApplyFilter()
    {
        IEnumerable<DataRow> rows = default!;
        if (string.IsNullOrWhiteSpace(SearchQuery))
        {
            rows = DataTable?.AsEnumerable() ?? rows;
            return rows;
        }

        rows = DataTable?
        .AsEnumerable()?
        .Where(row => DataTable
            .Columns
            .Cast<DataColumn>()
            .Any(column => row[column]?.ToString()?.IndexOf(SearchQuery, StringComparison.OrdinalIgnoreCase) >= 0)
        ) ?? rows;

        return rows;
    }

    public void AddColumn(TableColumn column)
    {
        Columns.Add(column);
        TableNodeContext = this;
    }

    public RenderFragment RenderTableColumn(TableColumn column, int rowNumber)
    {
        RenderFragment fragment = builder =>
        {
            builder.OpenComponent(0, typeof(TableColumn));
            builder.AddAttribute(1, nameof(TableColumn.DataSourceName), column.DataSourceName);
            builder.AddAttribute(2, nameof(TableColumn.FieldName), column.FieldName);
            builder.AddAttribute(3, nameof(TableColumn.Type), column.Type);
            builder.AddAttribute(4, nameof(TableColumn.DisplayFieldName), column.DisplayFieldName);
            builder.AddAttribute(5, nameof(TableColumn.DisplayFieldValue), column.DisplayFieldValue);
            builder.AddAttribute(6, nameof(TableColumn.RowNumber), rowNumber);
            builder.CloseComponent();
        };

        return fragment;
    }

}


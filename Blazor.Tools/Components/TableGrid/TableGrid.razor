@* TableGrid.razor *@
@using System.Data
@using Microsoft.AspNetCore.Components.RenderTree
@using Microsoft.AspNetCore.Components.Rendering

@* <CascadingValue Value="@TableGridContext">
    @ChildContent
</CascadingValue> *@

@if (!_renderTable)
{
    <CascadingValue Value="@TableGridContext">
        @ChildContent
    </CascadingValue>
}
else
{
    @RenderTable
}

@code {

    [Parameter] public string Title { get; set; } = "Sample Table";
    [Parameter] public RenderFragment ChildContent { get; set; } = null!;

    private bool _renderTable = false; // Flag to control when to render RenderTable()

    private RenderFragment RenderTable => builder =>
    {
        var renderTask = RenderTableContentAsync(builder);
        renderTask.Wait();
    };

    private Dictionary<string, DataTable> _dataSources = new Dictionary<string, DataTable>();
    private TableGrid TableGridContext = null!;
    private List<TableSource> _tableSources = new List<TableSource>();
    private List<TableNode> _nodes = new List<TableNode>();

    protected override void OnParametersSet()
    {
        TableGridContext = this;
        Console.WriteLine("TableGrid OnParametersSet");
    }

    public void AddTableSource(TableSource source)
    {
        _tableSources.Add(source);
        TableGridContext = this;
    }

    public void AddNode(TableNode node)
    {
        _nodes.Add(node);
        TableGridContext = this;
    }

    public void RegisterDataSource(string name, DataTable dataTable)
    {
        dataTable.TableName = name;
        _dataSources[name] = dataTable;
        TableGridContext = this;
    }

    public DataTable? GetDataSource(string name)
    {
        _dataSources.TryGetValue(name, out var dataTable);
        return dataTable;
    }

    private async Task ParseChildContentAsync()
    {
        //await Task.Delay(3000);
        var builder = new RenderTreeBuilder();
        ChildContent(builder);
        var frames = builder.GetFrames();

        int totalFrames = frames.Count;
        for (int i = 0; i < totalFrames; i++)
        {
            var frame = frames.Array[i];
            if (frame.FrameType == RenderTreeFrameType.Component && frame.ComponentType == typeof(TableNode))
            {
                var node = (TableNode)frame.Component;

                if (node == null)
                {
                    var renderFragment = new RenderFragment(builder =>
                    {
                        builder.AddMarkupContent(0, frame.MarkupContent);
                    });

                    // Parse the child content of TableNode
                    var nodeBuilder = new RenderTreeBuilder();
                    renderFragment(nodeBuilder);
                    var nodeFrames = nodeBuilder.GetFrames();
                    var totalNodes = nodeFrames.Count;
                    for (int j = 0; j < totalNodes; j++)
                    {
                        var nodeFrame = nodeFrames.Array[j];
                        if (nodeFrame.FrameType == RenderTreeFrameType.Component && nodeFrame.ComponentType == typeof(TableColumn))
                        {
                            var column = (TableColumn)nodeFrame.Component;
                            node.Columns.Add(column);
                        }
                    }

                    _nodes.Add(node);
                }
            }
        }
    }

    private async Task RenderTableContentAsync(RenderTreeBuilder builder)
    {
        //await ParseChildContentAsync();

        builder.OpenElement(0, "div");
        builder.AddContent(1, Title);

        foreach (var node in _nodes)
        {
            builder.OpenElement(2, "table");
            builder.AddAttribute(3, "title", node.Title);

            builder.OpenElement(4, "thead");
            builder.OpenElement(5, "tr");

            foreach (var column in node.Columns)
            {
                builder.OpenElement(6, "th");
                builder.AddContent(7, column.HeaderName);
                builder.CloseElement(); // th
            }

            builder.CloseElement(); // tr
            builder.CloseElement(); // thead

            builder.OpenElement(8, "tbody");

            var dataSourceRows = GetDataSource(node.DataSource)?.Rows;
            if (dataSourceRows != null)
            {
                var totalRows = dataSourceRows.Count;
                for ( int i=0; i < totalRows; i++)
                {
                    builder.OpenElement(9, "tr");

                    foreach (var column in node.Columns)
                    {
                        int rowIndex = i;
                        builder.OpenElement(10, "td");
                        // var content = node.RenderTableColumn(column, rowNumber);
                        builder = await RenderTableColumn(11, rowIndex, builder, column);
                        builder.CloseElement(); // td
                    }

                    builder.CloseElement(); // tr
                }
            }

            builder.CloseElement(); // tbody
            builder.CloseElement(); // table
        }

        builder.CloseElement(); // div

        await Task.CompletedTask;
    }

    public async Task<RenderTreeBuilder> RenderTableColumn(int sequence, int rowIndex, RenderTreeBuilder builder, TableColumn column)
    {
        var dataSource = column.GetDataSource();
        var rows = dataSource.Rows;
        if (rows != null)
        {
            if (column.Type == "TextBox")
            {
                builder.OpenElement(sequence, "input");
                builder.AddAttribute(sequence + 1, "type", "text");
                builder.AddAttribute(sequence + 2, "value", rows[rowIndex][column.FieldName]);
                builder.CloseElement();
            }
            else if (column.Type == "DropdownList")
            {
                builder.OpenElement(sequence, "select");

                for (int i = 0; i < rows.Count; i++)
                {
                    DataRow row = rows[i];
                    if (row != null)
                    {
                        var displayName = row[column.DisplayFieldName].ToString();
                        var displayValue = row[column.DisplayFieldValue].ToString();
                        
                        builder.OpenElement(sequence + i, "option");
                        builder.AddAttribute(sequence + i + 1, "value", displayValue);
                        // Set selected attribute if current row index matches the selected index
                        if (i == rowIndex)
                        {
                            builder.AddAttribute(sequence + i + 3, "selected", "selected");
                        }

                        builder.AddContent(sequence + i + 2, displayName);
                        
                        builder.CloseElement();
                    }
                }

                builder.CloseElement();
            }
        }

        await Task.CompletedTask;

        return builder;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Ensure RenderTable() is rendered only after initial render
            _renderTable = true;
            StateHasChanged();
        }

        await Task.CompletedTask;
    }
}

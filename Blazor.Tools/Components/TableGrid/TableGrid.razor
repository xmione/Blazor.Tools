@* TableGrid.razor *@

@using Blazor.Tools.Components.DTSearchBox
@* @using BlazorBootstrap *@
@using Microsoft.AspNetCore.Components.RenderTree
@using Microsoft.AspNetCore.Components.Rendering
@using System.Data

<DTSearchBox DataTable="@_dataTable" OnFilterDataTable="HandleFilterDataTableAsync" />

@if (!_renderTable)
{
    <CascadingValue Value="@TableGridContext">
        @ChildContent
    </CascadingValue>
}
else
{
    @RenderTable

    @* <Icon Name="IconName.PlusCircleFill" @onclick="ShowAddRowModalAsync" class="text-success icon-button mb-2 cursor-pointer" title="Add" /> *@

    <div>        
        <div class="pagination-container">
            <label for="pageSize">Page Size:</label>
            <select id="pageSize" @onchange="PageSizeChangedAsync">
                <option value=@_totalItems selected>@_totalItems</option>
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select>
            <!-- First Page -->
            @* <Icon Name="IconName.ChevronDoubleLeft" @onclick="GoToFirstPageAsync" class="pagination-icon" title="First" /> *@

            <!-- Previous Page -->
            @* <Icon Name="IconName.ChevronLeft" @onclick="GoToPreviousPageAsync" class="pagination-icon" title="Previous" /> *@

            <!-- Next Page -->
            @* <Icon Name="IconName.ChevronRight" @onclick="GoToNextPageAsync" class="pagination-icon" title="Next" /> *@

            <!-- Last Page -->
            @* <Icon Name="IconName.ChevronDoubleRight" @onclick="GoToLastPageAsync" class="pagination-icon" title="Last" /> *@

            <!-- Go To Page -->
            <input type="number" min="1" max="@_totalPages" @bind="_currentPage" />
            @* <Icon Name="IconName.CheckCircle" @onclick="GoToSpecifiedPageAsync" class="pagination-go-icon" title="Go" /> *@
        </div>
    </div>
    @if (AllowCellSelection)
    {
        <!-- Start cell and End cell textboxes -->
        <div class="row mb-2">
            <div class="col-auto">
                @* <Icon Name="IconName.Recycle" @onclick="ClearSelectionAsync" class="text-success icon-button mb-2 cursor-pointer" title="Clear" /> *@
            </div>
            <div class="col">
                <input @bind="_startCell" class="form-control" placeholder="Start Cell" />
            </div>
            <div class="col">
                <input @bind="_endCell" class="form-control" placeholder="End Cell" />
            </div>
        </div>
    }
    <!-- Add Row Modal -->
    @if (_showAddRowModal)
    {
        <AddRowModal ShowAddRowModal="_showAddRowModal"
                     DataTable="_dataTable"NewRowData="_newRowData"
                     OnClose="CloseAddRowModal"
                     OnSave="AddRowAsync" />
    }
}

@code {

    [Parameter] public string Title { get; set; } = "Sample Table";
    [Parameter] public RenderFragment ChildContent { get; set; } = null!;
    [Parameter] public bool AllowCellSelection { get; set; } = false;

    private bool _renderTable = false; // Flag to control when to render RenderTable()

    private DataTable? _dataTable = default!;
    private Dictionary<string, DataTable> _dataSources = new Dictionary<string, DataTable>();
    private TableGrid TableGridContext = null!;
    private List<TableSource> _tableSources = new List<TableSource>();
    private List<TableNode> _nodes = new List<TableNode>();

    private IEnumerable<DataRow>? _filteredRows;
    private IEnumerable<DataRow>? _pagedRows;
    private int _pageSize = 0;
    private int _currentPage = 1;
    private int _totalPages = 0;
    private int _totalItems = 0;
    private string? _selectedTableName;
    private string _searchQuery = string.Empty;
    private DataRow? _editedRow = default!;
    private Dictionary<string, object> _editValues = null!;
    private bool _isEditing = false;
    private bool _showAddRowModal = false;
    private DataRow _newRowData = default!;
    // New state variables for cell selection
    private string _startCell = string.Empty;
    private string _endCell = string.Empty;
    private bool _isFirstCellClicked = true;


    protected override void OnParametersSet()
    {
        Console.WriteLine("TableGrid OnParametersSet");
        TableGridContext = this;

    }

    private RenderFragment RenderTable => builder =>
    {
        var renderTask = RenderTableContentAsync(builder);
        renderTask.Wait();
    };

    public void AddTableSource(TableSource source)
    {
        _tableSources.Add(source);
        TableGridContext = this;
    }

    public void AddNode(TableNode node)
    {
        _nodes.Add(node);
        TableGridContext = this;
    }

    public void RegisterDataSource(string name, DataTable dataTable)
    {
        dataTable.TableName = name;
        _dataSources[name] = dataTable;
        TableGridContext = this;
    }

    public DataTable? GetDataSource(string name)
    {
        _dataSources.TryGetValue(name, out var dataTable);
        return dataTable;
    }

    private async Task RenderTableContentAsync(RenderTreeBuilder builder)
    {
        // <div>
        // <div class="data-table-grid-div">
        //     <table class="data-table-grid">
        int sequence = 0;
        builder.OpenElement(sequence, "div");
        builder.AddContent(sequence++, Title);
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "data-table-grid-div");
        foreach (var node in _nodes)
        {
            builder.OpenElement(sequence++, "table");
            builder.AddAttribute(sequence++, "title", node.Title);
            builder.AddAttribute(sequence++, "class", "data-table-grid");

            builder.OpenElement(sequence++, "thead");
            builder.OpenElement(sequence++, "tr");
            // Add a blank th column for edit/delete buttons.
            builder.OpenElement(sequence++, "th");
            builder.CloseElement(); // th

            // Start displaying the proper column headers.
            foreach (var column in node.Columns)
            {
                builder.OpenElement(sequence++, "th");
                builder.AddContent(sequence++, column.HeaderName);
                builder.CloseElement(); // th
            }

            builder.CloseElement(); // tr
            builder.CloseElement(); // thead

            builder.OpenElement(sequence++, "tbody");

            _dataTable = GetDataSource(node.DataSource);

            _totalItems = _dataTable?.Rows?.Count ?? 0;
            _pageSize = _totalItems;
            _filteredRows = _dataTable != null ? ApplyFilter() : _filteredRows;
            _pagedRows = _filteredRows?.Skip((_currentPage - 1) * _pageSize).Take(_pageSize);
            _totalPages = (int)Math.Ceiling((double)(_filteredRows?.Count() ?? 0) / _pageSize);
            _selectedTableName = _dataTable?.TableName;

            if (_pagedRows != null)
            {
                var totalRows = _pagedRows.Count();
                var pagedRows = _pagedRows.ToList();
                for ( int i=0; i < totalRows; i++)
                {
                    builder.OpenElement(sequence++, "tr");
                    var currentRow = pagedRows[i];
                    builder = await RenderEditAndDeleteButtons(sequence++, builder, currentRow);
                    foreach (var column in node.Columns)
                    {
                        int rowIndex = i;
                        builder.OpenElement(sequence++, "td");
                        // var content = node.RenderTableColumn(column, rowNumber);
                        builder = await RenderTableColumn(sequence++, rowIndex, builder, column);
                        builder.CloseElement(); // td
                    }

                    builder.CloseElement(); // tr
                }
            }

            builder.CloseElement(); // tbody
            builder.CloseElement(); //  <table class="data-table-grid">
        }

        builder.CloseElement(); // <div class="data-table-grid-div">
        builder.CloseElement(); // div

        await Task.CompletedTask;
    }

    private async Task<RenderTreeBuilder> RenderEditAndDeleteButtons(int sequence, RenderTreeBuilder builder, DataRow? row)
    {
        builder.OpenElement(sequence++, "td");
        builder.AddAttribute(sequence++, "class", "icons-td");

        // if (!_isEditing || row != _editedRow)
        // {
        //     // Edit icon
        //     // <Icon Name="IconName.PencilFill" @onclick="() => EditRow(row)" title="Edit" class="text-primary icon-button" />

        //     builder.OpenComponent<Icon>(sequence++);
        //     builder.AddAttribute(sequence++, "Name", IconName.PencilFill); // Blazor.Bootstrap icon class
        //     builder.AddAttribute(sequence++, "Class", "text-primary icon-button cursor-pointer");
        //     builder.AddAttribute(sequence++, "title", "Edit");
        //     builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => EditRow(row)));
        //     builder.CloseComponent();

        //     // Delete icon
        //     // <Icon Name="IconName.TrashFill" @onclick="() => DeleteRowAsync(row)" title="Delete" class="text-danger icon-button" />

        //     builder.OpenComponent<Icon>(sequence++);
        //     builder.AddAttribute(sequence++, "Name", IconName.TrashFill); // Blazor.Bootstrap icon class
        //     builder.AddAttribute(sequence++, "Class", "text-danger icon-button cursor-pointer");
        //     builder.AddAttribute(sequence++, "title", "Delete");
        //     builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => DeleteRowAsync(row)));
        //     builder.CloseComponent();
        // }
        // else
        // {
        //     // Save icon
        //     // <Icon Name="IconName.CheckCircleFill" @onclick="SaveRowAsync" title="Save" class="text-success icon-button" />

        //     builder.OpenComponent<Icon>(sequence++);
        //     builder.AddAttribute(sequence++, "Name", IconName.CheckCircleFill); // Blazor.Bootstrap icon class
        //     builder.AddAttribute(sequence++, "Class", "text-success icon-button cursor-pointer");
        //     builder.AddAttribute(sequence++, "title", "Save");
        //     builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, SaveRowAsync));
        //     builder.CloseComponent();

        //     // Cancel icon
        //     // <Icon Name="IconName.XCircleFill" @onclick="CancelEdit" title="Cancel" class="text-secondary icon-button" />
        //     builder.OpenComponent<Icon>(sequence++);
        //     builder.AddAttribute(sequence++, "Name", IconName.XCircleFill); // Blazor.Bootstrap icon class
        //     builder.AddAttribute(sequence++, "Class", "text-secondary icon-button cursor-pointer");
        //     builder.AddAttribute(sequence++, "title", "Cancel");
        //     builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, CancelEdit));
        //     builder.CloseComponent();
        // }

        builder.CloseElement();

        await Task.CompletedTask;

        return builder;
    }

    private void EditRow(DataRow? row)
    {
        if (_dataTable != null && row != null)
        {
            _editedRow = row;
            _editValues = _dataTable.Columns.Cast<DataColumn>().ToDictionary(col => col.ColumnName, col => row[col]);
            _isEditing = true;
        }
    }

    private async Task DeleteRowAsync(DataRow? row)
    {
        if (_dataTable != null && row != null)
        {
            _dataTable.Rows.Remove(row);
            //await _sessionManager.SaveToSessionTableAsync("_selectedTable", _dataTable);
            StateHasChanged(); // Refresh UI after deleting row
        }

        await Task.CompletedTask;
    }

    private async Task SaveRowAsync()
    {
        if (_editedRow != null && _editValues != null && _dataTable != null)
        {
            foreach (var column in _dataTable.Columns.Cast<DataColumn>())
            {
                _editedRow[column.ColumnName] = _editValues[column.ColumnName];
            }

            _editedRow = default!;
            _isEditing = false;

            //await _sessionManager.SaveToSessionTableAsync("_selectedTable", _dataTable, serialize: true);

            StateHasChanged();
        }

        await Task.CompletedTask;
    }

    private void CancelEdit()
    {
        _editedRow = default!;
        _isEditing = false;
        StateHasChanged(); // Refresh UI after canceling edit
    }

    public async Task<RenderTreeBuilder> RenderTableColumn(int sequence, int rowIndex, RenderTreeBuilder builder, TableColumn column)
    {
        var dataSource = column.GetDataSource();
        var rows = dataSource.Rows;
        if (rows != null)
        {
            if (column.Type == "TextBox")
            {
                builder.OpenElement(sequence, "input");
                builder.AddAttribute(sequence++, "type", "text");
                builder.AddAttribute(sequence++, "value", rows[rowIndex][column.FieldName]);
                builder.CloseElement();
            }
            else if (column.Type == "DropdownList")
            {
                builder.OpenElement(sequence, "select");

                for (int i = 0; i < rows.Count; i++)
                {
                    DataRow row = rows[i];
                    if (row != null)
                    {
                        var displayName = row[column.DisplayFieldName].ToString();
                        var displayValue = row[column.DisplayFieldValue].ToString();

                        builder.OpenElement(sequence++, "option");
                        builder.AddAttribute(sequence++, "value", displayValue);
                        // Set selected attribute if current row index matches the selected index
                        if (i == rowIndex)
                        {
                            builder.AddAttribute(sequence++, "selected", "selected");
                        }

                        builder.AddContent(sequence++, displayName);

                        builder.CloseElement();
                    }
                }

                builder.CloseElement();
            }
        }

        await Task.CompletedTask;

        return builder;
    }

    private async Task HandleFilterDataTableAsync(IEnumerable<DataRow> filteredRows)
    {
        _filteredRows = filteredRows;
        _pagedRows = _filteredRows.Skip((_currentPage - 1) * _pageSize).Take(_pageSize);

        StateHasChanged(); // Ensure UI updates after filtering
        await Task.CompletedTask;
    }

    private IEnumerable<DataRow> ApplyFilter()
    {
        IEnumerable<DataRow> rows = default!;
        if (string.IsNullOrWhiteSpace(_searchQuery))
        {
            rows = _dataTable?.AsEnumerable() ?? rows;
            return rows;
        }

        rows = _dataTable?
        .AsEnumerable()?
        .Where(row => _dataTable
            .Columns
            .Cast<DataColumn>()
            .Any(column => row[column]?.ToString()?.IndexOf(_searchQuery, StringComparison.OrdinalIgnoreCase) >= 0)
        ) ?? rows;

        return rows;
    }

    private async Task ShowAddRowModalAsync()
    {
        if (_dataTable != null)
        {
            _newRowData = _dataTable.NewRow();
            //await _sessionManager.SaveToSessionTableAsync("_newRowData", _newRowData, serialize: true);

            _showAddRowModal = true;
            StateHasChanged();
        }

        await Task.CompletedTask;
    }

    private async Task PageSizeChangedAsync(ChangeEventArgs e)
    {
        _pageSize = Convert.ToInt32(e.Value);
        _currentPage = 1; // Reset to first page when changing page size

        // await _sessionManager.SaveToSessionTableAsync("_pageSize", _pageSize, serialize: true);
        // await _sessionManager.SaveToSessionTableAsync("_currentPage", _currentPage, serialize: true);
        StateHasChanged(); // Refresh UI after changing page size

        await Task.CompletedTask;
    }
    private async Task GoToFirstPageAsync()
    {
        _currentPage = 1;
        //await _sessionManager.SaveToSessionTableAsync("_currentPage", _currentPage, serialize: true);
        StateHasChanged();

        await Task.CompletedTask;
    }

    private async Task GoToPreviousPageAsync()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            //await _sessionManager.SaveToSessionTableAsync("_currentPage", _currentPage, serialize: true);
            StateHasChanged();
        }

        await Task.CompletedTask;
    }

    private async Task GoToNextPageAsync()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            //await _sessionManager.SaveToSessionTableAsync("_currentPage", _currentPage, serialize: true);

            StateHasChanged();
        }

        await Task.CompletedTask;
    }

    private async Task GoToLastPageAsync()
    {
        _currentPage = _totalPages;
        // await _sessionManager.SaveToSessionTableAsync("_currentPage", _currentPage, serialize: true);

        StateHasChanged();

        await Task.CompletedTask;
    }

    private async Task GoToSpecifiedPageAsync()
    {
        if (_currentPage >= 1 && _currentPage <= _totalPages)
        {
            // await _sessionManager.SaveToSessionTableAsync("_currentPage", _currentPage, serialize: true);
            StateHasChanged();
        }
        else
        {
            // Handle invalid page number
            // For example, display a toast message or an error message
        }

        await Task.CompletedTask;
    }

    private async Task ClearSelectionAsync(MouseEventArgs e)
    {
        _startCell = string.Empty;
        _endCell = string.Empty;

        // await _sessionManager.SaveToSessionTableAsync("_startCell", _startCell);
        // await _sessionManager.SaveToSessionTableAsync("_endCell", _endCell);

        StateHasChanged();

        await Task.CompletedTask;
    }


    private void CloseAddRowModal()
    {
        _showAddRowModal = false;
        StateHasChanged(); // Ensure UI updates to hide the modal
    }

    private async Task AddRowAsync()
    {
        if (_dataTable != null)
        {
            DataRow newRow = _dataTable.NewRow();
            foreach (DataColumn column in _dataTable.Columns)
            {
                newRow[column.ColumnName] = _newRowData[column.ColumnName];
            }

            _dataTable.Rows.Add(newRow);
            //await _sessionManager.SaveToSessionTableAsync("_selectedTable", _dataTable, serialize: true);
            StateHasChanged(); // Ensure UI updates after adding row
        }

        CloseAddRowModal();

        await Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Ensure RenderTable() is rendered only after initial render
            _renderTable = true;
            StateHasChanged();
        }

        await Task.CompletedTask;
    }
}

@* TableNode.razor *@
@using System.Data
@using Microsoft.AspNetCore.Components.Rendering

<h3>@Title</h3>

<CascadingValue Value="@TableGridContext">
    <CascadingValue Value="@TableNodeContext">
        @ChildContent
    </CascadingValue>
</CascadingValue>

@code {
    [Parameter] public string Title { get; set; } = default!;
    [Parameter] public RenderFragment ChildContent { get; set; } = default!;
    [Parameter] public string DataSource { get; set; } = default!;
    [Parameter] public bool AllowCellSelection { get; set; } = false;
    [CascadingParameter] private TableGrid TableGridContext { get; set; } = default!;

    public List<TableColumn> Columns = new List<TableColumn>();
    public TableNode TableNodeContext = default!;

    private DataTable _dataTable = default!;

    protected override void OnParametersSet()
    {
        TableNodeContext = this;

        if (TableGridContext != null)
        {
            _dataTable = TableGridContext.GetDataSource(DataSource) ?? _dataTable;
        }

        TableGridContext?.AddNode(this);
        Console.WriteLine("TableNode OnParametersSet");
    }

    public void AddColumn(TableColumn column)
    {
        Columns.Add(column);
        TableNodeContext = this;
    }

    public RenderFragment RenderTableColumn(DataRow dataRow, TableColumn column) => builder =>
    {
        builder.OpenComponent(0, typeof(TableColumn));
        builder.AddAttribute(1, nameof(TableColumn.DataSource), column.DataSource);
        builder.AddAttribute(2, nameof(TableColumn.FieldName), column.FieldName);
        builder.AddAttribute(3, nameof(TableColumn.Type), column.Type);
        builder.AddAttribute(4, nameof(TableColumn.DisplayFieldName), column.DisplayFieldName);
        builder.AddAttribute(5, nameof(TableColumn.DisplayFieldValue), column.DisplayFieldValue);
        builder.CloseComponent();
    };
}


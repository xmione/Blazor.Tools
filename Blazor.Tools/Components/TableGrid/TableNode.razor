@* TableNode.razor *@
@using System.Data
@using Blazor.Tools.Components.DTSearchBox
@using Microsoft.AspNetCore.Components.RenderTree
@using Microsoft.AspNetCore.Components.Rendering
<h3>@Title</h3>

<DTSearchBox DataTable="@_dataTable" OnFilterDataTable="HandleFilterDataTableAsync" />
@if (_dataTable != null && _pagedRows != null)
{
    <div>
        <div class="data-table-grid-div">
            <table class="data-table-grid">
                <thead>
                    <tr>
                        <th></th> <!-- Empty header for edit/delete buttons -->
                        @foreach (DataColumn column in _dataTable.Columns)
                        {
                            <th>@column.ColumnName</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @if(_pagedRows.Count() > 0)
                    {
                        @foreach (DataRow row in _pagedRows)
                        {
                            <tr>
                                <td class="icons-td">
                                    @if (!_isEditing || row != _editedRow)
                                    {
                                        <Icon Name="IconName.PencilFill" @onclick="() => EditRow(row)" title="Edit" class="text-primary icon-button" />
                                        <Icon Name="IconName.TrashFill" @onclick="() => DeleteRowAsync(row)" title="Delete" class="text-danger icon-button" />
                                    }
                                    else
                                    {
                                        <Icon Name="IconName.CheckCircleFill" @onclick="SaveRowAsync" title="Save" class="text-success icon-button" />
                                        <Icon Name="IconName.XCircleFill" @onclick="CancelEdit" title="Cancel" class="text-secondary icon-button" />
                                    }
                                </td>

                                @if (_columnTemplates != null)
                                {
                                    @foreach (var template in _columnTemplates)
                                    {
                                        <td>
                                            @template.Value
                                        </td>
                                    }
                                }
                                else
                                {
                                    @foreach (DataColumn column in _dataTable.Columns)
                                    {
                                        <td title="R@(row.Table.Rows.IndexOf(row))C@(_dataTable.Columns.IndexOf(column))" @onclick="() => HandleCellClickAsync(row.Table.Rows.IndexOf(row), _dataTable.Columns.IndexOf(column))">
                                            @if (_isEditing && _editedRow != null && row == _editedRow)
                                            {
                                                <input value="@_editValues[column.ColumnName]?.ToString()" @oninput="e => _editValues[column.ColumnName] = e?.Value?.ToString() ?? default!" class="form-control" />
                                            }
                                            else
                                            {
                                                @row[column.ColumnName]
                                            }
                                        </td>
                                    }
                                }
                                
                            </tr>
                        }
                    }
                    
                </tbody>
            </table>
        </div>

        <Icon Name="IconName.PlusCircleFill" @onclick="ShowAddRowModalAsync" class="text-success icon-button mb-2 cursor-pointer" title="Add" />
        
        <div class="pagination-container">
            <label for="pageSize">Page Size:</label>
            <select id="pageSize" @onchange="PageSizeChangedAsync">
                <option value=@_totalItems selected>@_totalItems</option>
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select>
            <!-- First Page -->
            <Icon Name="IconName.ChevronDoubleLeft" @onclick="GoToFirstPageAsync" class="pagination-icon" title="First" />

            <!-- Previous Page -->
            <Icon Name="IconName.ChevronLeft" @onclick="GoToPreviousPageAsync" class="pagination-icon" title="Previous" />

            <!-- Next Page -->
            <Icon Name="IconName.ChevronRight" @onclick="GoToNextPageAsync" class="pagination-icon" title="Next" />

            <!-- Last Page -->
            <Icon Name="IconName.ChevronDoubleRight" @onclick="GoToLastPageAsync" class="pagination-icon" title="Last" />

            <!-- Go To Page -->
            <input type="number" min="1" max="@_totalPages" @bind="_currentPage" />
            <Icon Name="IconName.CheckCircle" @onclick="GoToSpecifiedPageAsync" class="pagination-go-icon" title="Go" />
        </div>
    </div>
    @if (AllowCellSelection)
    {
        <!-- Start cell and End cell textboxes -->
        <div class="row mb-2">
            <div class="col-auto">
                <Icon Name="IconName.Recycle" @onclick="ClearSelectionAsync" class="text-success icon-button mb-2 cursor-pointer" title="Clear" />
            </div>
            <div class="col">
                <input @bind="_startCell" class="form-control" placeholder="Start Cell" />
            </div>
            <div class="col">
                <input @bind="_endCell" class="form-control" placeholder="End Cell" />
            </div>
        </div>
    }
    <!-- Add Row Modal -->
    @if (_showAddRowModal)
    {
        <AddRowModal ShowAddRowModal="_showAddRowModal"
                     DataTable="_dataTable"
                     NewRowData="_newRowData"
                     OnClose="CloseAddRowModal"
                     OnSave="AddRowAsync" />
    }
}
else
{
    <p>No data available.</p>
}

@code {

    [Parameter] public string Title { get; set; } = default!;
    [Parameter] public RenderFragment ChildContent { get; set; } = default!;
    [Parameter] public string DataSource { get; set; } = default!;
    [Parameter] public bool AllowCellSelection { get; set; } = false;
    [CascadingParameter] private TableGrid Context { get; set; } = default!;

    private DataTable _dataTable = default!;
    private Dictionary<string, RenderFragment> _columnTemplates = default!;
    private string? _serializedDataTable;
    private DataRow _editedRow = default!;
    private bool _isEditing = false;
    private Dictionary<string, object> _editValues = null!;
    private string _searchQuery = string.Empty;
    private IEnumerable<DataRow>? _filteredRows;
    private IEnumerable<DataRow>? _pagedRows;
    private int _pageSize = 0;
    private int _currentPage = 1;
    private int _totalPages = 0;
    private int _totalItems = 0;

    private DataTable? _targetTable;
    private string? _targetTableName;
    private DataRow _editedTargetTableRow = default!;
    private bool _isTargetTableEditing = false;
    private Dictionary<string, object> _editTargetTableValues = null!;
    private string searchTargetTableQuery = string.Empty;
    private IEnumerable<DataRow>? _filteredTargetTableRows = default!;
    private IEnumerable<DataRow>? _pagedTargetTableRows = default!;
    private int _pageSizeTargetTable = 0;
    private int _currentTargetTablePage = 1;
    private int _totalTargetTablePages = 0;
    private int _totalTargetTableItems = 0;
    private string _uniqueField = string.Empty;
    private bool _showFieldSelection = false;

    // State variables
    private bool _showAddRowModal = false;

    // New state variables for cell selection
    private string _startCell = string.Empty;
    private string _endCell = string.Empty;
    private bool _isFirstCellClicked = true;

    private DataRow _newRowData = default!;
    private DataRow[] _selectedData = Array.Empty<DataRow>();

    private List<string> _uniqueFieldNames = default!;
    private string? _selectedTableName;
    private bool _isRetrieved = false;
    private List<TargetTableColumn> _targetTableColumnList = default!;

    protected override void OnParametersSet()
    {
        if (Context != null)
        {
            _dataTable = Context?.GetDataSource(DataSource) ?? _dataTable;
        }

        _totalItems = _dataTable?.Rows?.Count ?? 0;
        _pageSize = _totalItems;
        _filteredRows = _dataTable != null? ApplyFilter(): _filteredRows;
        _pagedRows = _filteredRows?.Skip((_currentPage - 1) * _pageSize).Take(_pageSize);
        _totalPages = (int)Math.Ceiling((double)(_filteredRows?.Count() ?? 0) / _pageSize);
        _selectedTableName = _dataTable?.TableName;

        ParseChildContent();

        Console.WriteLine("TableNode OnParametersSetAsync");
    }
    private void ParseChildContent()
    {
        try
        {
            if (ChildContent != null)
            {
                var builder = new RenderTreeBuilder();
                ChildContent(builder);

                var frames = builder.GetFrames();

                if (_columnTemplates == null)
                {
                    _columnTemplates = new Dictionary<string, RenderFragment>();
                }

                int frameCount = frames.Count;
                for (int i = 0; i < frameCount; i++)
                {
                    var frame = frames.Array[i];

                    if (frame.FrameType == RenderTreeFrameType.Component)
                    {
                        if (frame.Component != null)
                        {
                            Console.WriteLine("Component is {0}", frame.Component.ToString());
                        }
                        else
                        {
                            
                            Console.WriteLine("Component is null");
                        }

                        if (frame.Component is TableColumn columnComponent)
                        {
                            // Access the AttributeName property
                            var attributeName = frame.AttributeName.ToString(); // This could be a string or some other type depending on the attribute

                            // Use attributeName and attributeValue as needed
                            Console.WriteLine($"Attribute name: {attributeName}");

                            var renderFragment = new RenderFragment(builder =>
                            {
                                builder.OpenComponent(0, typeof(TableColumn));
                                builder.AddAttribute(1, "FieldName", columnComponent.FieldName);
                                builder.CloseComponent();
                            });

                            _columnTemplates.Add(columnComponent.FieldName, renderFragment);

                        }
                        
                    }
                    
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error parsing child content: {ex.Message}");
        }
    }
    private async Task AddRowAsync()
    {
        if (_dataTable != null)
        {
            DataRow newRow = _dataTable.NewRow();
            foreach (DataColumn column in _dataTable.Columns)
            {
                newRow[column.ColumnName] = _newRowData[column.ColumnName];
            }

            _dataTable.Rows.Add(newRow);
            StateHasChanged(); // Ensure UI updates after adding row
        }

        CloseAddRowModal();
    }

    private async Task ShowAddRowModalAsync()
    {
        if (_dataTable != null)
        {
            _newRowData = _dataTable.NewRow();

            _showAddRowModal = true;
            StateHasChanged();
        }
    }

    private DataRow[] GetDataInRange(int startRow, int startCol, int endRow, int endCol)
    {
        List<DataRow> dataInRange = new List<DataRow>();

        if (_dataTable != null)
        {
            // Create a new DataTable with the selected columns
            DataTable filteredDataTable = new DataTable();
            for (int i = startCol; i <= endCol; i++)
            {
                DataColumn column = _dataTable.Columns[i];
                filteredDataTable.Columns.Add(new DataColumn(column.ColumnName, column.DataType));
            }

            for (int i = startRow; i <= endRow; i++)
            {
                DataRow newRow = filteredDataTable.NewRow();

                for (int j = startCol; j <= endCol; j++)
                {
                    newRow[j - startCol] = _dataTable.Rows[i][j];
                }

                dataInRange.Add(newRow);
            }

        }

        return dataInRange.ToArray();
    }

    private void CloseAddRowModal()
    {
        _showAddRowModal = false;
        StateHasChanged(); // Ensure UI updates to hide the modal
    }

    private async Task ClearSelectionAsync(MouseEventArgs e)
    {
        _startCell = string.Empty;
        _endCell = string.Empty;

        StateHasChanged();
    }

    private void EditRow(DataRow row)
    {
        if (_dataTable != null)
        {
            _editedRow = row;
            _editValues = _dataTable.Columns.Cast<DataColumn>().ToDictionary(col => col.ColumnName, col => row[col]);
            _isEditing = true;
        }
    }

    private async Task SaveRowAsync()
    {
        if (_editedRow != null && _editValues != null && _dataTable != null)
        {
            foreach (var column in _dataTable.Columns.Cast<DataColumn>())
            {
                _editedRow[column.ColumnName] = _editValues[column.ColumnName];
            }

            _editedRow = default!;
            _isEditing = false;

            StateHasChanged();
        }
    }

    private void CancelEdit()
    {
        _editedRow = default!;
        _isEditing = false;
        StateHasChanged(); // Refresh UI after canceling edit
    }

    private async Task DeleteRowAsync(DataRow row)
    {
        if (_dataTable != null)
        {
            _dataTable.Rows.Remove(row);
            StateHasChanged(); // Refresh UI after deleting row
        }
    }

    private IEnumerable<DataRow> ApplyFilter()
    {
        IEnumerable<DataRow> rows = default!;
        if (string.IsNullOrWhiteSpace(_searchQuery))
        {
            rows = _dataTable?.AsEnumerable() ?? rows;
            return rows;
        }

        rows = _dataTable?
        .AsEnumerable()?
        .Where(row => _dataTable
            .Columns
            .Cast<DataColumn>()
            .Any(column => row[column]?.ToString()?.IndexOf(_searchQuery, StringComparison.OrdinalIgnoreCase) >= 0)
        ) ?? rows;

        return rows;
    }

    private async Task ChangePageAsync(int pageNumber)
    {
        _currentPage = pageNumber;
        StateHasChanged(); // Refresh UI after changing page
    }

    private async Task PageSizeChangedAsync(ChangeEventArgs e)
    {
        _pageSize = Convert.ToInt32(e.Value);
        _currentPage = 1; // Reset to first page when changing page size
        StateHasChanged(); // Refresh UI after changing page size
    }

    private async Task GoToFirstPageAsync()
    {
        _currentPage = 1;
        StateHasChanged();
    }

    private async Task GoToPreviousPageAsync()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            StateHasChanged();
        }
    }

    private async Task GoToNextPageAsync()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            StateHasChanged();
        }
    }

    private async Task GoToLastPageAsync()
    {
        _currentPage = _totalPages;
        StateHasChanged();
    }

    private async Task GoToSpecifiedPageAsync()
    {
        if (_currentPage >= 1 && _currentPage <= _totalPages)
        {
            StateHasChanged();
        }
        else
        {
            // Handle invalid page number
            // For example, display a toast message or an error message
        }
    }

    private async Task UpdateNewRowDataAsync(DataColumn column, string value)
    {
        _newRowData[column.ColumnName] = Convert.ChangeType(value, column.DataType);
    }

    private async Task HandleCellClickAsync(int rowIndex, int columnIndex)
    {
        string cellIdentifier = $"R{rowIndex}C{columnIndex}";

        if (string.IsNullOrEmpty(_startCell) || _isFirstCellClicked)
        {
            _startCell = cellIdentifier;
            _isFirstCellClicked = false;
        }
        else
        {
            _endCell = cellIdentifier;
            _isFirstCellClicked = true;
        }

        StateHasChanged(); // Refresh UI to reflect the changes in cell selection
    }

    private void EditTargetTableRow(DataRow row)
    {
        _editedTargetTableRow = row;
        _editTargetTableValues = _targetTable?.Columns.Cast<DataColumn>().ToDictionary(col => col.ColumnName, col => row[col]) ?? default!;
        _isTargetTableEditing = true;
    }

    private async Task SaveTargetTableRowAsync()
    {
        if (_editedTargetTableRow != null && _editTargetTableValues != null)
        {
            var columns = _targetTable?.Columns?.Cast<DataColumn>() ?? default!;
            foreach (var column in columns)
            {
                _editedTargetTableRow[column.ColumnName] = _editTargetTableValues[column.ColumnName];
            }

            _editedTargetTableRow = default!;
            _isEditing = false;

            StateHasChanged();
        }
    }

    private void CancelTargetTableEdit()
    {
        _editedTargetTableRow = default!;
        _isTargetTableEditing = false;
        StateHasChanged(); // Refresh UI after canceling edit
    }

    private async Task DeleteTargetTableRowAsync(DataRow row)
    {
        _targetTable?.Rows.Remove(row);
        StateHasChanged();
    }

    private IEnumerable<DataRow>? ApplyTargetTableFilter()
    {
        IEnumerable<DataRow>? rows = default!;
        if (string.IsNullOrWhiteSpace(searchTargetTableQuery))
        {
            return _targetTable?.AsEnumerable();
        }

        rows = _targetTable?.AsEnumerable().Where(row =>
            _targetTable.Columns.Cast<DataColumn>().Any(column =>
                row[column]?.ToString()?.IndexOf(searchTargetTableQuery, StringComparison.OrdinalIgnoreCase) >= 0));

        return rows;
    }

    private async Task ChangeTargetTablePageAsync(int pageNumber)
    {
        _currentTargetTablePage = pageNumber;
        StateHasChanged(); // Refresh UI after changing page
    }

    private async Task PageSizeTargetTableChangedAsync(ChangeEventArgs e)
    {
        _pageSizeTargetTable = Convert.ToInt32(e.Value);
        _currentTargetTablePage = 1; // Reset to first page when changing page size
        StateHasChanged(); // Refresh UI after changing page size
    }

    private async Task GoToFirstTargetTablePageAsync()
    {
        _currentTargetTablePage = 1;
        StateHasChanged();
    }

    private async Task GoToPreviousTargetTablePageAsync()
    {
        if (_currentTargetTablePage > 1)
        {
            _currentTargetTablePage--;
            StateHasChanged();
        }
    }

    private async Task GoToNextTargetTablePageAsync()
    {
        if (_currentTargetTablePage < _totalTargetTablePages)
        {
            _currentTargetTablePage++;
            StateHasChanged();
        }
    }

    private async Task GoToLastTargetTablePageAsync()
    {
        _currentTargetTablePage = _totalTargetTablePages;
        StateHasChanged();
    }

    private async Task GoToSpecifiedTargetTablePageAsync()
    {
        if (_currentTargetTablePage >= 1 && _currentTargetTablePage <= _totalTargetTablePages)
        {
            StateHasChanged();
        }
        else
        {
            // Handle invalid page number
            // For example, display a toast message or an error message
        }
    }

    private DataTable BuildColumns(DataRow[] selectedData, DataTable targetTable)
    {
        if (selectedData.Length > 0)
        {
            var selectedRow = selectedData[0];

            if (targetTable == null)
            {
                targetTable = new DataTable();

            }

            foreach (DataColumn column in selectedRow.Table.Columns)
            {
                // Check if the column exists in the target table
                // if (!targetTable.Columns.Contains(_selectedFieldValue))
                // {
                //     var newDataColumn = new DataColumn(_selectedFieldValue, column.DataType);
                //     targetTable.Columns.Add(newDataColumn);
                // }
            }
        }

        return targetTable;
    }

    private DataTable BuildTable(DataRow[] selectedData, DataTable targetTable)
    {
        try
        {
            foreach (DataRow selectedRow in selectedData)
            {
                // If the row does not exist, create a new row
                var tableRow = targetTable.NewRow();
                targetTable.Rows.Add(tableRow);

                // Update the row with values from the selectedRow
                foreach (DataColumn column in selectedRow.Table.Columns)
                {
                    var columnName = column.ColumnName;
                    //tableRow[_selectedFieldValue] = selectedRow[columnName];
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: {0}", ex.Message);
        }

        return targetTable;
    }

    private DataTable RenameTableColumn(DataTable targetTable)
    {
        foreach (DataColumn column in targetTable.Columns)
        {
            // Check if the column exists in the target table
            if (column.ColumnName.Equals(_uniqueField))
            {
                //column.ColumnName = _selectedFieldValue;
            }
        }

        return targetTable;
    }

    public DataTable JoinSelectedDataToTargetTable(DataRow[] selectedData, DataTable targetTable)
    {
        if (selectedData.Length > 0)
        {
            targetTable = BuildColumns(selectedData, targetTable);
            targetTable = BuildTable(selectedData, targetTable);
            targetTable = RenameTableColumn(targetTable);
        }

        return targetTable;
    }

    private void HandleUniqueFieldNamesChanged(List<string> newUniqueFieldNames)
    {
        _uniqueFieldNames = newUniqueFieldNames;
        StateHasChanged();
    }

    private bool IsFieldSelected(string fieldName)
    {
        _uniqueFieldNames ??= new List<string>();

        bool fieldNameExists = _uniqueFieldNames.Contains(fieldName);

        if (!fieldNameExists)
        {
            _uniqueFieldNames.Add(fieldName);
        }
        else
        {
            _uniqueFieldNames.Remove(fieldName);
        }

        return !fieldNameExists;
    }

    public async Task<DataRow[]> ShowSetTargetTableModalAsync()
    {
        if (!string.IsNullOrEmpty(_startCell) && !string.IsNullOrEmpty(_endCell))
        {
            // Extracting start row and column from startCell
            int startRow = int.Parse(_startCell.Substring(1, _startCell.IndexOf('C') - 1));
            int startCol = int.Parse(_startCell.Substring(_startCell.IndexOf('C') + 1));

            // Extracting end row and column from endCell
            int endRow = int.Parse(_endCell.Substring(1, _endCell.IndexOf('C') - 1));
            int endCol = int.Parse(_endCell.Substring(_endCell.IndexOf('C') + 1));

            _selectedData = GetDataInRange(startRow, startCol, endRow, endCol);
        }

        StateHasChanged();
        await Task.CompletedTask;
        return _selectedData;
    }

    public async Task HandleSelectedDataComb(DataRow[] selectedData)
    {
        _startCell = _endCell = string.Empty;
        _selectedData = selectedData;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleFilterDataTableAsync(IEnumerable<DataRow> filteredRows)
    {
        _filteredRows = filteredRows;
        _pagedRows = _filteredRows.Skip((_currentPage - 1) * _pageSize).Take(_pageSize);

        StateHasChanged(); // Ensure UI updates after filtering
        await Task.CompletedTask;
    }
}

@page "/test-excel-uploader"
@rendermode InteractiveServer
@using Blazor.Tools.BlazorBundler.Components.LoadingGif
@using Blazor.Tools.BlazorBundler.Entities
@using Blazor.Tools.BlazorBundler.Entities.SampleObjects.Data
@using Blazor.Tools.BlazorBundler.Interfaces
@using Blazor.Tools.BlazorBundler.Components.Grid
@using Blazor.Tools.BlazorBundler.SessionManagement
@using Blazor.Tools.BlazorBundler.SessionManagement.Interfaces
@using Blazor.Tools.BlazorBundler.Utilities.Exceptions

@inherits SampleData
@inject LoadingGifStateService LGSS

<LoadingGif Message="@LGSS.LoadingMessage" />
@if (_isInitialized)
{
    <ExcelUploader Title="Upload Excel Files"
        ModelsAssemblyName="@ModelsAssemblyName"
        ViewModelsAssemblyName="@ViewModelsAssemblyName"
        HostAssemblies="@HostAssemblies" 
        OnLoading="@HandleExcelUploaderLoadingState"
    />
}

@if (_isExcelUploaderLoading)
{
    <p>Excel Uploader is Loading...</p>
}

@code {
    [Inject] public ISessionTableService _sessionTableService { get; set; } = default!;

    private bool _isInitialized = false;
    private bool _isExcelUploaderLoading = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            
            var apiDLLPath = @"C:\Hermie\AccSol\AccSol.API\bin\Debug\net8.0\AccSol.API.dll";

            // Using specific settings: This is hard coded only because it is a test component.
            var aspNetCoreEnvironment = "Development";
            var aspNetCoreURLs = "https://localhost:7040/";

            // Using the current Environment variables:
            // var aspNetCoreEnvironment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");
            // var aspNetCoreURLs = Environment.GetEnvironmentVariable("ASPNETCORE_URLS");

            var sessionManager = SessionManager.GetInstance(_sessionTableService, apiDLLPath, aspNetCoreEnvironment, aspNetCoreURLs);

            // Set the initialization flag after the loading process
            _isInitialized = true;

            _isInitialized = true;
            LGSS.Subscribe(OnLoadingStateChanged);
        }
        catch (Exception ex)
        {
            AppLogger.HandleError(ex);

        }
        
        await Task.CompletedTask;
    }

    public void Dispose()
    {
        LGSS.Unsubscribe(OnLoadingStateChanged);
    }

    private void OnLoadingStateChanged()
    {
        // Ensure that the component re-renders after loading state changes
        InvokeAsync(StateHasChanged);
    }
      
    private void HandleExcelUploaderLoadingState(bool isLoading)
    {
        _isExcelUploaderLoading = isLoading;
        InvokeAsync(StateHasChanged); // Ensure UI updates when child loading state changes
    }
}

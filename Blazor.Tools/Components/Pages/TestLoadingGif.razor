@* 
    TestLoadingGif.razor
*@

@page "/test-loading-gif"
@using Blazor.Tools.BlazorBundler.Components.LoadingGif
@inject LoadingGifStateService LGSS

<h3>Parent Component - Loading Example</h3>

<button @onclick="ToggleLoading">Toggle Parent Loading</button>

<!-- Parent's Loading Gif -->
<LoadingGif Message="@LGSS.LoadingMessage" />

@if (_isInitialized)
{
    <p>Parent Initialized. Now showing child component...</p>
    <!-- Child Component -->
    <LoadingGifChild OnChildLoading="@HandleChildLoadingState" />
}

@if (_isChildLoading)
{
    <p>The child component is running a long process...</p>
}

@code {
    private string _loaderName = "test-load-gif-razor";
    private bool _isInitialized = false;
    private bool _isChildLoading = false;

    protected override void OnInitialized()
    {
        _isInitialized = true;
        LGSS.Subscribe(OnLoadingStateChanged);
    }

    public void Dispose()
    {
        LGSS.Unsubscribe(OnLoadingStateChanged);
    }

    private void OnLoadingStateChanged()
    {
        // Ensure that the component re-renders after loading state changes
        InvokeAsync(StateHasChanged);
    }

    private async Task ToggleLoading()
    {
        string message = "Parent is processing...";
        await LGSS.RunTaskAsync(_loaderName, message, LongRunningTaskAsync);
    }

    private async Task LongRunningTaskAsync()
    {
        await Task.Delay(3000); // Simulate a long-running task
    }

    private void HandleChildLoadingState(bool isLoading)
    {
        _isChildLoading = isLoading;
        InvokeAsync(StateHasChanged); // Ensure UI updates when child loading state changes
    }
}

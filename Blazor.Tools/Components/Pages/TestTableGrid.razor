@page "/test-table-grid"
@rendermode InteractiveServer

@using Blazor.Tools.BlazorBundler.Entities
@using Blazor.Tools.BlazorBundler.Interfaces
@using Blazor.Tools.BlazorBundler.Components.Grid
@using Blazor.Tools.Components.Pages.SampleObjects
@using Bogus
@using System.Data
@using System.ComponentModel.DataAnnotations

@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Test TableGrid</PageTitle>
<h1>Using TableGrid Component</h1>
<TableGrid 
    Title="@_title" 
    TableID="@_tableID" 
    ColumnDefinitions="@_columnDefinitions" 
    ModelVM="_employeeVM" 
    Items="_employees" 
    DataSources="@_dataSources" 
    ItemsChanged="OnItemsChanged" 
    AllowCellRangeSelection="true"
>
</TableGrid>

<style>
    .marked-border{
        border: 5px solid blue!important;    
    }
</style>
<script>
    window.setValue = (elementId, newValue) => {
        document.getElementById(elementId).value = newValue;
    };

    window.getValue = (elementId) => {
        var el = document.getElementById(elementId);

        var elementValue = null
        if (el) {
            elementValue = el.value;
        }

        return elementValue;
    };

    window.toggleCellBorders = (startRow, endRow, startCol, endCol, totalRows, totalCols, tableId, shouldMark) => {

        // ran through all the cells 
        for (var row = 1; row < totalRows + 1; row++) {
            for (var col = 1; col < totalCols + 1; col++) {
                var elementId = tableId + "-" + row + "-" + col;
                var cellElement = document.getElementById(elementId);
                if (cellElement) {
                    
                    var isRowInBetweenRange = row >= startRow && row <= endRow;
                    var isColInBetweenRange = col >= startCol && col <= endCol;
                    if (isRowInBetweenRange && isColInBetweenRange) {
                        // mark if row and col are in the range
                        if (shouldMark) {
                            if (!cellElement.classList.contains('marked-border')) {
                                cellElement.classList.add('marked-border');
                            }
                        }
                        else {
                            if (cellElement.classList.contains('marked-border')) {
                                cellElement.classList.remove('marked-border');
                            }
                        }
                    }
                    else{
                        // unmark if row and col are not in the range
                        if (cellElement.classList.contains('marked-border')) {
                            cellElement.classList.remove('marked-border');
                        }
                    }
                    
                }
            }
        }
    };

    window.logToConsole = (message) => {
        console.log(message);
    };

</script>

 
@code {

    //   [Inject] public ISessionTableService _sessionTableService { get; set; } = default!;

    private Dictionary<string, object> _dataSources = default!;
    private List<EmployeeVM> _employees = new List<EmployeeVM>();
    private List<CountryVM> _countries = new List<CountryVM>();
    private List<string>? _hiddenEmployeeColumns;
    private List<string>? _hiddenCountryColumns;
    private EmployeeVM _employeeVM = new EmployeeVM(new ContextProvider());
    private CountryVM? _selectedCountry;
    private const string _title = "Employee List";
    private const string _tableID = "employee";
    private bool _isFirstCellClicked = true;
    private string _startCell = string.Empty;
    private string _endCell = string.Empty;
    private int _startRow;
    private int _endRow;
    private int _startCol;
    private int _endCol;
    private List<TableColumnDefinition> _columnDefinitions = default!;

    private int GetRowID<TModelVM>(TModelVM model)
    {
        // Attempt to get the RowID property dynamically
        var rowIDProperty = typeof(TModelVM).GetProperty("RowID");

        if (rowIDProperty != null && rowIDProperty.PropertyType == typeof(int))
        {
            return (int)rowIDProperty.GetValue(model);
        }

        throw new InvalidOperationException("RowID property not found or not of type int.");
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("TestTableGrid OnParametersSetAsync");
        //SessionManager.GetInstance(_sessionTableService);
        // Initialize _employees DataTable

        _columnDefinitions = new List<TableColumnDefinition>
        {
            new TableColumnDefinition
            {
                ColumnName = "ID",
                HeaderText = "ID",
                ColumnType = typeof(int)
            },
            new TableColumnDefinition
            {
                ColumnName = "FirstName",
                HeaderText = "First Name",
                ColumnType = typeof(string),
                ValueChanged = new Action<object, EmployeeVM>(OnFirstNameValueChanged)
            },
            new TableColumnDefinition
            {
                ColumnName = "MiddleName",
                HeaderText = "Middle Name",
                ColumnType = typeof(string),
                ValueChanged = new Action<object, EmployeeVM>(OnMiddleNameValueChanged)
            },
            new TableColumnDefinition
            {
                ColumnName = "LastName",
                HeaderText = "Lastst Name",
                ColumnType = typeof(string),
                ValueChanged = new Action<object, EmployeeVM>(OnLastNameValueChanged)
            },
            new TableColumnDefinition
            {
                Items = _countries,
                ColumnName = "CountryID",
                HeaderText = "Country",
                OptionIDFieldName="ID",
                OptionValueFieldName="Name",
                ColumnType = typeof(IEnumerable<CountryVM>),
                ValueChanged = new Action<object, EmployeeVM>(OnIDValueChanged)
            }
          
        };

        var employeeFaker = new Faker<EmployeeVM>()
           .RuleFor(e => e.ID, f => f.IndexFaker + 1)
           .RuleFor(e => e.RowID, f => f.IndexFaker + 1)
           .RuleFor(e => e.FirstName, f => f.Name.FirstName())
           .RuleFor(e => e.MiddleName, f => f.Name.FirstName().Substring(0, 1) + ".")
           .RuleFor(e => e.LastName, f => f.Name.LastName())
           .RuleFor(e => e.DateOfBirth, f => DateOnly.FromDateTime(f.Date.Past(50, DateTime.Now.AddYears(-18))))
           .RuleFor(e => e.CountryID, f => f.Random.Int(1, 2));

        var countryFaker = new Faker<CountryVM>()
        .RuleFor(e => e.RowID, f => f.IndexFaker + 1)
        .RuleFor(c => c.ID, f => f.IndexFaker + 1)
        .RuleFor(c => c.Name, f => f.Address.Country());

        for (int i = 0; i < 101; i++)
        {
            var employee = employeeFaker.Generate();
            _employees.Add(employee);
        }

        // Initialize and generate country data
        for (int i = 0; i < 101; i++)
        {
            var country = countryFaker.Generate();
            _countries.Add(country);
        }

        _hiddenEmployeeColumns = new List<string>();
        _hiddenEmployeeColumns.Add("AActions");
        _hiddenEmployeeColumns.Add("ID");

        _hiddenCountryColumns = new List<string>();
        _hiddenCountryColumns.Add("AActions");
        _hiddenCountryColumns.Add("ID");

        _dataSources = new Dictionary<string, object>()
        {
            ["EmployeeDS"] = _employees,    
            ["CountryDS"] = _countries    
        };

        _selectedCountry = new CountryVM(new ContextProvider());
        _selectedCountry = _countries[0];
    }

    private void OnDropdownValueChanged(object newValue, EmployeeVM employeeVM)
    {
        employeeVM.CountryID = Convert.ToInt32(newValue);
        // Update employee list

        var foundEmployee = _employees.FirstOrDefault(e => e.RowID == employeeVM.RowID);

        if (foundEmployee != null)
        {
            foundEmployee.CountryID = employeeVM.CountryID;
        }

        StateHasChanged();

    }

    private void OnFirstNameValueChanged(object newValue, EmployeeVM employeeVM)
    {
        employeeVM.FirstName = newValue?.ToString() ?? string.Empty;
        // Update employee list

        var foundEmployee = _employees.FirstOrDefault(e => e.RowID == employeeVM.RowID);

        if (foundEmployee != null)
        {
            foundEmployee.FirstName = employeeVM.FirstName;
        }

        StateHasChanged();

    }

    private void OnMiddleNameValueChanged(object newValue, EmployeeVM employeeVM)
    {
        employeeVM.MiddleName = newValue?.ToString() ?? string.Empty;
        // Update employee list

        var foundEmployee = _employees.FirstOrDefault(e => e.RowID == employeeVM.RowID);

        if (foundEmployee != null)
        {
            foundEmployee.MiddleName = employeeVM.MiddleName;
        }

        StateHasChanged();

    }

    private void OnLastNameValueChanged(object newValue, EmployeeVM employeeVM)
    {
        employeeVM.LastName = newValue?.ToString() ?? string.Empty;
        // Update employee list

        var foundEmployee = _employees.FirstOrDefault(e => e.RowID == employeeVM.RowID);

        if (foundEmployee != null)
        {
            foundEmployee.LastName = employeeVM.LastName;
        }

        StateHasChanged();

    }

    private void OnDateOfBirthValueChanged(DateOnly? newValue, EmployeeVM employeeVM)
    {
        employeeVM.DateOfBirth = newValue.GetValueOrDefault();

        // Update employee list

        var foundEmployee = _employees.FirstOrDefault(e => e.RowID == employeeVM.RowID);

        if (foundEmployee != null)
        {
            foundEmployee.DateOfBirth = employeeVM.DateOfBirth;
        }

        StateHasChanged();
    }

    private void OnIDValueChanged(object newValue, EmployeeVM employeeVM)
    {
        employeeVM.ID = int.Parse(newValue?.ToString() ?? "0" );
        // Update employee list

        var foundEmployee = _employees.FirstOrDefault(e => e.RowID == employeeVM.RowID);

        if (foundEmployee != null)
        {
            foundEmployee.ID = employeeVM.ID;
        }

        StateHasChanged();

    }

    private void OnItemsChanged(IEnumerable<IBaseVM> updatedItems)
    {
        _employees = ((IEnumerable<EmployeeVM>)updatedItems).ToList();
    }

    private async Task HandleCellClickAsync(string id, EmployeeVM employee, int column)
    {
        string cellIdentifier = $"R{employee.RowID}C{column}";

        // get the values from the hidden input fields first
        _startCell = await JSRuntime.InvokeAsync<string>("getValue", $"{_tableID}-start-cell");
        _endCell = await JSRuntime.InvokeAsync<string>("getValue", $"{_tableID}-end-cell");

        bool areBothFilled = !string.IsNullOrEmpty(_startCell) && !string.IsNullOrEmpty(_endCell); 
        if (string.IsNullOrEmpty(_startCell) || _isFirstCellClicked)
        {
            _startRow = employee.RowID;
            _startCol = column;
            _startCell = cellIdentifier;
            _isFirstCellClicked = areBothFilled? _isFirstCellClicked : false;

            await JSRuntime.InvokeVoidAsync("setValue", $"{_tableID}-start-row", $"{_startRow}");
            await JSRuntime.InvokeVoidAsync("setValue", $"{_tableID}-start-col", $"{_startCol}");
            await JSRuntime.InvokeVoidAsync("setValue", $"{_tableID}-start-cell", cellIdentifier);
        }
        else
        {
            _endRow = employee.RowID;
            _endCol = column;
            _endCell = cellIdentifier;
            _isFirstCellClicked = areBothFilled? _isFirstCellClicked : true;

            await JSRuntime.InvokeVoidAsync("setValue", $"{_tableID}-end-row", $"{_endRow}");
            await JSRuntime.InvokeVoidAsync("setValue", $"{_tableID}-end-col", $"{_endCol}");
            await JSRuntime.InvokeVoidAsync("setValue", $"{_tableID}-end-cell", cellIdentifier);

        }

        // you need to ask again because it already has ran through some codes that might affect its value.
        areBothFilled = !string.IsNullOrEmpty(_startCell) && !string.IsNullOrEmpty(_endCell); 

        if (areBothFilled)
        {
            var totalRows = _employees.Count;
            var totalCols = _columnDefinitions?.Count;
            // Now that they are both filled with values, mark them
            await JSRuntime.InvokeVoidAsync("toggleCellBorders", _startRow, _endRow, _startCol, _endCol, totalRows, totalCols, _tableID, true);
        }

        //await _sessionManager.SaveToSessionTableAsync($"{Title}_nodeStartCell", _nodeStartCell, serialize: false);
        //await _sessionManager.SaveToSessionTableAsync($"{Title}_nodeEndCell", _nodeEndCell, serialize: false);
        //await _sessionManager.SaveToSessionTableAsync($"{Title}_nodeIsFirstCellClicked", _nodeIsFirstCellClicked, serialize: true);

        StateHasChanged(); // Refresh UI to reflect the changes in cell selection

        await Task.CompletedTask;
    }
}

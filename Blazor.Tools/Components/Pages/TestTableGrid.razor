@page "/test-table-grid"
@rendermode InteractiveServer

@using Blazor.Tools.BlazorBundler.Entities
@using Blazor.Tools.BlazorBundler.Interfaces
@using Blazor.Tools.BlazorBundler.Components.Grid
@using Bogus
@using System.Data
@using System.ComponentModel.DataAnnotations

@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Test Table Grid</PageTitle>

<h1>Testing Sample Table Grid Component</h1>
<TableGrid 
    Title="@_title" 
    TableID="@_tableID" 
    ColumnDefinitions="@_columnDefinitions" 
    TModel="Employee" 
    TModelVM="EmployeeVM" 
    ModelVM="_employeeVM" 
    TIModel="IModelExtendedProperties" 
    Items="_employees" 
    DataSources="@_dataSources" 
    ItemsChanged="OnItemsChanged" 
    AllowCellRangeSelection="true"
>
</TableGrid>

<style>
    .marked-border{
        border: 5px solid blue!important;    
    }
</style>
<script>
    window.setValue = (elementId, newValue) => {
        document.getElementById(elementId).value = newValue;
    };

    window.getValue = (elementId) => {
        var el = document.getElementById(elementId);

        var elementValue = null
        if (el) {
            elementValue = el.value;
        }

        return elementValue;
    };

    window.toggleCellBorders = (startRow, endRow, startCol, endCol, totalRows, totalCols, tableId, shouldMark) => {

        // ran through all the cells 
        for (var row = 1; row < totalRows + 1; row++) {
            for (var col = 1; col < totalCols + 1; col++) {
                var elementId = tableId + "-" + row + "-" + col;
                var cellElement = document.getElementById(elementId);
                if (cellElement) {
                    
                    var isRowInBetweenRange = row >= startRow && row <= endRow;
                    var isColInBetweenRange = col >= startCol && col <= endCol;
                    if (isRowInBetweenRange && isColInBetweenRange) {
                        // mark if row and col are in the range
                        if (shouldMark) {
                            if (!cellElement.classList.contains('marked-border')) {
                                cellElement.classList.add('marked-border');
                            }
                        }
                        else {
                            if (cellElement.classList.contains('marked-border')) {
                                cellElement.classList.remove('marked-border');
                            }
                        }
                    }
                    else{
                        // unmark if row and col are not in the range
                        if (cellElement.classList.contains('marked-border')) {
                            cellElement.classList.remove('marked-border');
                        }
                    }
                    
                }
            }
        }
    };

    window.logToConsole = (message) => {
        console.log(message);
    };

</script>

 
@code {

    //   [Inject] public ISessionTableService _sessionTableService { get; set; } = default!;

    private Dictionary<string, object> _dataSources = default!;
    private List<EmployeeVM> _employees = new List<EmployeeVM>();
    private List<CountryVM> _countries = new List<CountryVM>();
    private List<string>? _hiddenEmployeeColumns;
    private List<string>? _hiddenCountryColumns;
    private EmployeeVM _employeeVM = new EmployeeVM();
    private CountryVM? _selectedCountry;
    private const string _title = "Employee List";
    private const string _tableID = "employee";
    private bool _isFirstCellClicked = true;
    private string _startCell = string.Empty;
    private string _endCell = string.Empty;
    private int _startRow;
    private int _endRow;
    private int _startCol;
    private int _endCol;
    private List<TableColumnDefinition> _columnDefinitions = default!;

    private int GetRowID<TModelVM>(TModelVM model)
    {
        // Attempt to get the RowID property dynamically
        var rowIDProperty = typeof(TModelVM).GetProperty("RowID");

        if (rowIDProperty != null && rowIDProperty.PropertyType == typeof(int))
        {
            return (int)rowIDProperty.GetValue(model);
        }

        throw new InvalidOperationException("RowID property not found or not of type int.");
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("TestTableGrid OnParametersSetAsync");
        //SessionManager.GetInstance(_sessionTableService);
        // Initialize _employees DataTable

        _columnDefinitions = new List<TableColumnDefinition>
        {
            new TableColumnDefinition
            {
                ColumnName = "ID",
                HeaderText = "ID",
                ColumnType = typeof(int)
            },
            new TableColumnDefinition
            {
                ColumnName = "FirstName",
                HeaderText = "First Name",
                ColumnType = typeof(string),
                ValueChanged = new Action<object, EmployeeVM>(OnFirstNameValueChanged)
            },
            new TableColumnDefinition
            {
                ColumnName = "MiddleName",
                HeaderText = "Middle Name",
                ColumnType = typeof(string),
                ValueChanged = new Action<object, EmployeeVM>(OnMiddleNameValueChanged)
            },
            new TableColumnDefinition
            {
                ColumnName = "LastName",
                HeaderText = "Lastst Name",
                ColumnType = typeof(string),
                ValueChanged = new Action<object, EmployeeVM>(OnLastNameValueChanged)
            },
            new TableColumnDefinition
            {
                Items = _countries,
                ColumnName = "CountryID",
                HeaderText = "Country",
                OptionIDFieldName="ID",
                OptionValueFieldName="Name",
                ColumnType = typeof(string),
                ValueChanged = new Action<object, EmployeeVM>(OnIDValueChanged)
            }
          
        };

        var employeeFaker = new Faker<EmployeeVM>()
           .RuleFor(e => e.ID, f => f.IndexFaker + 1)
           .RuleFor(e => e.RowID, f => f.IndexFaker + 1)
           .RuleFor(e => e.FirstName, f => f.Name.FirstName())
           .RuleFor(e => e.MiddleName, f => f.Name.FirstName().Substring(0, 1) + ".")
           .RuleFor(e => e.LastName, f => f.Name.LastName())
           .RuleFor(e => e.DateOfBirth, f => DateOnly.FromDateTime(f.Date.Past(50, DateTime.Now.AddYears(-18))))
           .RuleFor(e => e.CountryID, f => f.Random.Int(1, 2));

        var countryFaker = new Faker<CountryVM>()
        .RuleFor(e => e.RowID, f => f.IndexFaker + 1)
        .RuleFor(c => c.ID, f => f.IndexFaker + 1)
        .RuleFor(c => c.Name, f => f.Address.Country());

        for (int i = 0; i < 101; i++)
        {
            var employee = employeeFaker.Generate();
            _employees.Add(employee);
        }

        // Initialize and generate country data
        for (int i = 0; i < 101; i++)
        {
            var country = countryFaker.Generate();
            _countries.Add(country);
        }

        _hiddenEmployeeColumns = new List<string>();
        _hiddenEmployeeColumns.Add("AActions");
        _hiddenEmployeeColumns.Add("ID");

        _hiddenCountryColumns = new List<string>();
        _hiddenCountryColumns.Add("AActions");
        _hiddenCountryColumns.Add("ID");

        _dataSources = new Dictionary<string, object>()
        {
            ["EmployeeDS"] = _employees,    
            ["CountryDS"] = _countries    
        };

        _selectedCountry = new CountryVM();
        _selectedCountry = _countries[0];
    }

    private void OnDropdownValueChanged(object newValue, EmployeeVM employeeVM)
    {
        employeeVM.CountryID = Convert.ToInt32(newValue);
        // Update employee list

        var foundEmployee = _employees.FirstOrDefault(e => e.RowID == employeeVM.RowID);

        if (foundEmployee != null)
        {
            foundEmployee.CountryID = employeeVM.CountryID;
        }

        StateHasChanged();

    }

    private void OnFirstNameValueChanged(object newValue, EmployeeVM employeeVM)
    {
        employeeVM.FirstName = newValue?.ToString() ?? string.Empty;
        // Update employee list

        var foundEmployee = _employees.FirstOrDefault(e => e.RowID == employeeVM.RowID);

        if (foundEmployee != null)
        {
            foundEmployee.FirstName = employeeVM.FirstName;
        }

        StateHasChanged();

    }

    private void OnMiddleNameValueChanged(object newValue, EmployeeVM employeeVM)
    {
        employeeVM.MiddleName = newValue?.ToString() ?? string.Empty;
        // Update employee list

        var foundEmployee = _employees.FirstOrDefault(e => e.RowID == employeeVM.RowID);

        if (foundEmployee != null)
        {
            foundEmployee.MiddleName = employeeVM.MiddleName;
        }

        StateHasChanged();

    }

    private void OnLastNameValueChanged(object newValue, EmployeeVM employeeVM)
    {
        employeeVM.LastName = newValue?.ToString() ?? string.Empty;
        // Update employee list

        var foundEmployee = _employees.FirstOrDefault(e => e.RowID == employeeVM.RowID);

        if (foundEmployee != null)
        {
            foundEmployee.LastName = employeeVM.LastName;
        }

        StateHasChanged();

    }

    private void OnDateOfBirthValueChanged(DateOnly? newValue, EmployeeVM employeeVM)
    {
        employeeVM.DateOfBirth = newValue.GetValueOrDefault();

        // Update employee list

        var foundEmployee = _employees.FirstOrDefault(e => e.RowID == employeeVM.RowID);

        if (foundEmployee != null)
        {
            foundEmployee.DateOfBirth = employeeVM.DateOfBirth;
        }

        StateHasChanged();
    }

    private void OnIDValueChanged(object newValue, EmployeeVM employeeVM)
    {
        employeeVM.ID = int.Parse(newValue?.ToString() ?? "0" );
        // Update employee list

        var foundEmployee = _employees.FirstOrDefault(e => e.RowID == employeeVM.RowID);

        if (foundEmployee != null)
        {
            foundEmployee.ID = employeeVM.ID;
        }

        StateHasChanged();

    }

    private void OnItemsChanged(IEnumerable<EmployeeVM> updatedItems)
    {
        _employees = updatedItems.ToList();
    }

    private async Task HandleCellClickAsync(string id, EmployeeVM employee, int column)
    {
        string cellIdentifier = $"R{employee.RowID}C{column}";

        // get the values from the hidden input fields first
        _startCell = await JSRuntime.InvokeAsync<string>("getValue", $"{_tableID}-start-cell");
        _endCell = await JSRuntime.InvokeAsync<string>("getValue", $"{_tableID}-end-cell");

        bool areBothFilled = !string.IsNullOrEmpty(_startCell) && !string.IsNullOrEmpty(_endCell); 
        if (string.IsNullOrEmpty(_startCell) || _isFirstCellClicked)
        {
            _startRow = employee.RowID;
            _startCol = column;
            _startCell = cellIdentifier;
            _isFirstCellClicked = areBothFilled? _isFirstCellClicked : false;

            await JSRuntime.InvokeVoidAsync("setValue", $"{_tableID}-start-row", $"{_startRow}");
            await JSRuntime.InvokeVoidAsync("setValue", $"{_tableID}-start-col", $"{_startCol}");
            await JSRuntime.InvokeVoidAsync("setValue", $"{_tableID}-start-cell", cellIdentifier);
        }
        else
        {
            _endRow = employee.RowID;
            _endCol = column;
            _endCell = cellIdentifier;
            _isFirstCellClicked = areBothFilled? _isFirstCellClicked : true;

            await JSRuntime.InvokeVoidAsync("setValue", $"{_tableID}-end-row", $"{_endRow}");
            await JSRuntime.InvokeVoidAsync("setValue", $"{_tableID}-end-col", $"{_endCol}");
            await JSRuntime.InvokeVoidAsync("setValue", $"{_tableID}-end-cell", cellIdentifier);

        }

        // you need to ask again because it already has ran through some codes that might affect its value.
        areBothFilled = !string.IsNullOrEmpty(_startCell) && !string.IsNullOrEmpty(_endCell); 

        if (areBothFilled)
        {
            var totalRows = _employees.Count;
            var totalCols = _columnDefinitions?.Count;
            // Now that they are both filled with values, mark them
            await JSRuntime.InvokeVoidAsync("toggleCellBorders", _startRow, _endRow, _startCol, _endCol, totalRows, totalCols, _tableID, true);
        }

        //await _sessionManager.SaveToSessionTableAsync($"{Title}_nodeStartCell", _nodeStartCell, serialize: false);
        //await _sessionManager.SaveToSessionTableAsync($"{Title}_nodeEndCell", _nodeEndCell, serialize: false);
        //await _sessionManager.SaveToSessionTableAsync($"{Title}_nodeIsFirstCellClicked", _nodeIsFirstCellClicked, serialize: true);

        StateHasChanged(); // Refresh UI to reflect the changes in cell selection

        await Task.CompletedTask;
    }

    public interface IModelExtendedProperties
    {
        public bool IsEditMode { get; set; }    
        public bool IsVisible { get; set; }    
        public int StartCell { get; set; }
        public int EndCell { get; set; }
        public bool IsFirstCellClicked { get; set; }

    }

    public class Employee
    { 
        public int ID { get; set; }
        public string FirstName { get; set; } = default!;
        public string MiddleName { get; set; } = default!;
        public string LastName { get; set; } = default!;
        public DateOnly DateOfBirth { get; set; } = default!;
        public int CountryID { get; set; } 
    }

    public class Country
    {
        public int ID { get; set; }
        public string Name { get; set; } = default!;
    }

    public class DataSource<T>
    {
        public string DataSourceName { get; set; } = default!;
        public List<T> DataSourceList { get; set; } = default!;
    }

    public class EmployeeVM : Employee, IModelExtendedProperties, IValidatableObject, ICloneable<EmployeeVM>, IViewModel<Employee, IModelExtendedProperties, EmployeeVM>
    {
        private List<EmployeeVM> _employees = new List<EmployeeVM>(); // Initialize the list
        public int RowID { get; set; } // Integer property to indicate row ID
        public bool IsEditMode { get; set; } // Boolean property to indicate editing mode
        public bool IsVisible { get; set; } // Boolean property to indicate if visible
        public int StartCell { get; set; } // Integer property to indicate start of cell range selection
        public int EndCell { get; set; } // Integer property to indicate end of cell range selection
        public bool IsFirstCellClicked { get; set; } // Boolean property to indicate if StartCell control is clicked

        public EmployeeVM() { }

        public EmployeeVM(Employee model)
        {
            ID = model.ID;
            FirstName = model.FirstName;
            MiddleName = model.MiddleName;
            LastName = model.LastName;
            DateOfBirth = model.DateOfBirth;
            CountryID = model.CountryID;
        }

        public EmployeeVM(EmployeeVM modelVM)
        {
            IsEditMode = modelVM.IsEditMode;
            IsVisible = modelVM.IsVisible;
            IsFirstCellClicked = modelVM.IsFirstCellClicked;
            StartCell = modelVM.StartCell;
            EndCell = modelVM.EndCell;
            RowID = modelVM.RowID;
            ID = modelVM.ID;
            FirstName = modelVM.FirstName;
            MiddleName = modelVM.MiddleName;
            LastName = modelVM.LastName;
            FirstName = modelVM.FirstName;
            DateOfBirth = modelVM.DateOfBirth;
            CountryID = modelVM.CountryID;
        }

        public EmployeeVM Clone()
        {
            return new EmployeeVM
                {
                    IsEditMode = this.IsEditMode,
                    IsVisible = this.IsVisible,
                    IsFirstCellClicked = this.IsFirstCellClicked,
                    StartCell = this.StartCell,
                    EndCell = this.EndCell,
                    RowID = this.RowID,
                    ID = this.ID,
                    FirstName = this.FirstName,
                    MiddleName = this.MiddleName,
                    LastName = this.LastName,
                    DateOfBirth = this.DateOfBirth,
                    CountryID = this.CountryID
                };
        }

        public void SetList(List<EmployeeVM> items)
        {
            _employees = items;
        }

        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Ensure _clientVMEntryList is set before calling Validate
            if (_employees == null)
            {
                // Log or handle the situation where _clientVMEntryList is not set
                yield break; // Exit the validation early
            }

            // Implement your custom validation logic here
            //if (!IsEditing && AlreadyExists(Name, ID)) // Check existence only in editing mode
            //{
            //    yield return new ValidationResult("Name already exists.", new[] { nameof(Name) });
            //}
        }

        private bool AlreadyExists(string name, int currentItemId)
        {
            bool alreadyExists = false;

            if (name != null)
            {
                // Exclude the current item from the search
                var foundItem = _employees.FirstOrDefault(p => p.FirstName == name && p.ID != currentItemId);
                alreadyExists = foundItem != null;
            }

            return alreadyExists;
        }

        public async Task<EmployeeVM> FromModel(Employee model)
        {
            try
            {
                if (model != null)
                {
                    await Task.Run(() =>
                    {
                        ID = model.ID;
                        FirstName = model.FirstName;
                        MiddleName = model.MiddleName;
                        LastName = model.LastName;
                        DateOfBirth = model.DateOfBirth;
                        CountryID = model.CountryID;
                    });

                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("FromModel(Employee model, Dictionary<string, object> serviceList): {0}\r\n{1}", ex.Message, ex.StackTrace);
            }

            return this;
        }

        public Employee ToNewModel()
        {
            return new Employee
                {
                    ID = this.ID,
                    FirstName = this.FirstName,
                    MiddleName = this.MiddleName,
                    LastName = this.LastName,
                    DateOfBirth = this.DateOfBirth,
                    CountryID = this.CountryID
                };
        }

        public IModelExtendedProperties ToNewIModel()
        {
            return new EmployeeVM
                {
                    IsEditMode = this.IsEditMode,
                    IsVisible = this.IsVisible,
                    IsFirstCellClicked = this.IsFirstCellClicked,
                    StartCell = this.StartCell,
                    EndCell = this.EndCell,
                    RowID = this.RowID,
                    ID = this.ID,
                    FirstName = this.FirstName,
                    MiddleName = this.MiddleName,
                    LastName = this.LastName,
                    DateOfBirth = this.DateOfBirth,
                    CountryID = this.CountryID
                };
        }

        public async Task<EmployeeVM> SetEditMode(EmployeeVM modelVM, bool isEditMode)
        {
            modelVM.IsEditMode = isEditMode;
            await Task.CompletedTask;
            return modelVM;
        }

        public async Task<EmployeeVM> SaveModelVM(EmployeeVM modelVM)
        {
            modelVM.IsEditMode = false;
            await Task.CompletedTask;
            return modelVM;
        }

        public async Task<EmployeeVM> SaveModelVMToNewModelVM(EmployeeVM modelVM)
        {
            var newEmployee = new EmployeeVM()
                {
                    IsEditMode = modelVM.IsEditMode,
                    IsVisible = modelVM.IsVisible,
                    IsFirstCellClicked = modelVM.IsFirstCellClicked,
                    StartCell = modelVM.StartCell,
                    EndCell = modelVM.EndCell,
                    RowID = modelVM.RowID,
                    ID = modelVM.ID,
                    FirstName = modelVM.FirstName,
                    MiddleName = modelVM.MiddleName,
                    LastName = modelVM.LastName,
                    DateOfBirth = modelVM.DateOfBirth,
                    CountryID = modelVM.CountryID
                };

            await Task.CompletedTask;

            return newEmployee;
        }

        public async Task<IEnumerable<EmployeeVM>> AddItemToList(IEnumerable<EmployeeVM> modelVMList, EmployeeVM newModelVM)
        {
            var list = modelVMList.ToList();

            int listCount = list.Count();
            RowID = listCount + 1;
            newModelVM.RowID = RowID;
            if (listCount > 0)
            {
                var firstItem = list.First();
                newModelVM.IsFirstCellClicked = firstItem.IsFirstCellClicked;
                newModelVM.StartCell = firstItem.StartCell;
                newModelVM.EndCell = firstItem.EndCell;
            }

            list.Add(newModelVM);

            await Task.CompletedTask;

            return list;
        }

        public async Task<IEnumerable<EmployeeVM>> UpdateList(IEnumerable<EmployeeVM> modelVMList, EmployeeVM updatedModelVM, bool isAdding)
        {
            EmployeeVM? modelVM = null;

            if (isAdding)
            {
                var list = modelVMList.ToList();
                list.Remove(updatedModelVM);

                modelVMList = list;
            }
            else
            {
                modelVM = modelVMList.FirstOrDefault(e => e.ID == updatedModelVM.ID);

                if (modelVM != null)
                {
                    modelVM.IsEditMode = updatedModelVM.IsEditMode;
                    modelVM.IsVisible = updatedModelVM.IsVisible;
                    modelVM.IsFirstCellClicked = updatedModelVM.IsFirstCellClicked;
                    modelVM.StartCell = updatedModelVM.StartCell;
                    modelVM.EndCell = updatedModelVM.EndCell;
                    modelVM.ID = updatedModelVM.ID;
                    modelVM.FirstName = updatedModelVM.FirstName;
                    modelVM.MiddleName = updatedModelVM.MiddleName;
                    modelVM.LastName = updatedModelVM.LastName;
                    modelVM.DateOfBirth = updatedModelVM.DateOfBirth;
                    modelVM.CountryID = updatedModelVM.CountryID;
                }
            }


            await Task.CompletedTask;

            return modelVMList;
        }

        public async Task<IEnumerable<EmployeeVM>> DeleteItemFromList(IEnumerable<EmployeeVM> modelVMList, EmployeeVM deletedModelVM)
        {
            var list = modelVMList.ToList();

            var isDeleted = list.Remove(deletedModelVM);

            //TODO: sol: Add logic here for deleted and not deleted conditions
            if (isDeleted) { }
            else { }

            await Task.CompletedTask;

            return list;
        }

    }

    public class CountryVM : Country, IModelExtendedProperties, IValidatableObject, ICloneable<CountryVM>, IViewModel<Country, IModelExtendedProperties, CountryVM>
    {
        private List<CountryVM> _countries = new List<CountryVM>(); // Initialize the list
        public int RowID { get; set; } // Integer property to indicate row ID
        public bool IsEditMode { get; set; } // Boolean property to indicate editing mode
        public bool IsVisible { get; set; } // Boolean property to indicate editing mode
        public int StartCell { get; set; } // Integer property to indicate start of cell range selection
        public int EndCell { get; set; } // Integer property to indicate end of cell range selection
        public bool IsFirstCellClicked { get; set; } // Boolean property to indicate if StartCell control is clicked

        public CountryVM() { }
        public CountryVM(Country model)
        {
            ID = model.ID;
            Name = model.Name;
        }

        public CountryVM(CountryVM modelVM)
        {
            IsEditMode = modelVM.IsEditMode;
            IsVisible = modelVM.IsVisible;
            IsFirstCellClicked = modelVM.IsFirstCellClicked;
            StartCell = modelVM.StartCell;
            EndCell = modelVM.EndCell;
            RowID = modelVM.RowID;
            ID = modelVM.ID;
            Name = modelVM.Name;
        }
        public CountryVM Clone()
        {
            return new CountryVM
                {
                    IsEditMode = this.IsEditMode,
                    IsVisible = this.IsVisible,
                    IsFirstCellClicked = this.IsFirstCellClicked,
                    StartCell = this.StartCell,
                    EndCell = this.EndCell,
                    RowID = this.RowID,
                    ID = this.ID,
                    Name = this.Name,
                };
        }

        public void SetList(List<CountryVM> items)
        {
            _countries = items;
        }

        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Ensure _clientVMEntryList is set before calling Validate
            if (_countries == null)
            {
                // Log or handle the situation where _clientVMEntryList is not set
                yield break; // Exit the validation early
            }

            // Implement your custom validation logic here
            //if (!IsEditing && AlreadyExists(Name, ID)) // Check existence only in editing mode
            //{
            //    yield return new ValidationResult("Name already exists.", new[] { nameof(Name) });
            //}
        }

        private bool AlreadyExists(string name, int currentItemId)
        {
            bool alreadyExists = false;

            if (name != null)
            {
                // Exclude the current item from the search
                var foundItem = _countries.FirstOrDefault(p => p.Name == name && p.ID != currentItemId);
                alreadyExists = foundItem != null;
            }

            return alreadyExists;
        }
        public async Task<CountryVM> FromModel(Country model)
        {
            try
            {
                if (model != null)
                {
                    await Task.Run(() =>
                    {
                        ID = model.ID;
                        Name = model.Name;
                    });

                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("FromModel(Country model, Dictionary<string, object> serviceList): {0}\r\n{1}", ex.Message, ex.StackTrace);
            }

            return this;
        }
        public Country ToNewModel()
        {
            return new Country
                {
                    ID = this.ID,
                    Name = this.Name,
                };
        }

        public IModelExtendedProperties ToNewIModel()
        {
            return new CountryVM
                {
                    IsEditMode = this.IsEditMode,
                    IsVisible = this.IsVisible,
                    IsFirstCellClicked = this.IsFirstCellClicked,
                    StartCell = this.StartCell,
                    EndCell = this.EndCell,
                    RowID = this.RowID,
                    ID = this.ID,
                    Name = this.Name,
                };
        }

        public async Task<CountryVM> SetEditMode(CountryVM modelVM, bool isEditMode)
        {
            modelVM.IsEditMode = isEditMode;
            await Task.CompletedTask;
            return modelVM;
        }

        public async Task<CountryVM> SaveModelVM(CountryVM modelVM)
        {
            modelVM.IsEditMode = false;
            await Task.CompletedTask;

            return modelVM;
        }

        public async Task<CountryVM> SaveModelVMToNewModelVM(CountryVM modelVM)
        {
            var newModelVM = new CountryVM()
                {
                    IsEditMode = modelVM.IsEditMode,
                    IsVisible = modelVM.IsVisible,
                    IsFirstCellClicked = modelVM.IsFirstCellClicked,
                    StartCell = modelVM.StartCell,
                    EndCell = modelVM.EndCell,
                    RowID = modelVM.RowID,
                    ID = modelVM.ID,
                    Name = modelVM.Name,
                };

            await Task.CompletedTask;

            return newModelVM;
        }

        public async Task<IEnumerable<CountryVM>> AddItemToList(IEnumerable<CountryVM> modelVMList, CountryVM newModelVM)
        {
            var list = modelVMList.ToList();

            int listCount = list.Count();
            RowID = listCount + 1;
            newModelVM.RowID = RowID;
            if (listCount > 0)
            {
                var firstItem = list.First();
                newModelVM.IsFirstCellClicked = firstItem.IsFirstCellClicked;
                newModelVM.StartCell = firstItem.StartCell;
                newModelVM.EndCell = firstItem.EndCell;
            }

            list.Add(newModelVM);

            await Task.CompletedTask;

            return list;
        }

        public async Task<IEnumerable<CountryVM>> UpdateList(IEnumerable<CountryVM> modelVMList, CountryVM updatedModelVM, bool isAdding)
        {
            CountryVM? modelVM = null;

            if (isAdding)
            {
                var list = modelVMList.ToList();
                list.Remove(updatedModelVM);
                modelVMList = list;
            }
            else
            {
                modelVM = modelVMList.FirstOrDefault(e => e.ID == updatedModelVM.ID);

                if (modelVM != null)
                {
                    modelVM.IsEditMode = updatedModelVM.IsEditMode;
                    modelVM.IsVisible = updatedModelVM.IsVisible;
                    modelVM.IsFirstCellClicked = updatedModelVM.IsFirstCellClicked;
                    modelVM.StartCell = updatedModelVM.StartCell;
                    modelVM.EndCell = updatedModelVM.EndCell;
                    modelVM.RowID = updatedModelVM.RowID;
                    modelVM.ID = updatedModelVM.ID;
                    modelVM.Name = updatedModelVM.Name;
                }

            }

            await Task.CompletedTask;

            return modelVMList;
        }

        public async Task<IEnumerable<CountryVM>> DeleteItemFromList(IEnumerable<CountryVM> modelVMList, CountryVM deletedModelVM)
        {
            var list = modelVMList.ToList();

            var isDeleted = list.Remove(deletedModelVM);

            //TODO: sol: Add logic here for deleted and not deleted conditions
            if (isDeleted) { }
            else { }

            await Task.CompletedTask;

            return list;
        }
    }
}

@page "/test-table-grid"
@rendermode InteractiveServer

@using Blazor.Tools.BlazorBundler.Entities
@using Blazor.Tools.BlazorBundler.Interfaces
@using Blazor.Tools.BlazorBundler.Components.Grid
@using Bogus
@using System.Data
@using System.ComponentModel.DataAnnotations

@inject NavigationManager Navigation

<PageTitle>Test Table Grid</PageTitle>

<h1>Testing Sample Table Grid Component</h1>
<TableGridInternals Title="Employee List" TModel="Employee" TModelVM="EmployeeVM" ModelVM="_employeeVM" TIModel="IActions" Items="_employees" 
    DataSources="@_dataSources" Context="employee" ItemsChanged="OnItemsChanged" >
    <StartContent>
        <h2>Employee List</h2>
    </StartContent>
    <TableHeader>
        <th>ID</th>
        <th>First Name</th>
        <th>Middle Name</th>
        <th>Last Name</th>
        <th>DateOfBirth</th>
        <th>Country</th>
    </TableHeader>
    <RowTemplate>
        <td>
            <NumberInput ColumnName="ID" Value="@employee.ID" RowID="@employee.RowID"
            ValueChanged="@((object newValue) => OnIDValueChanged(newValue, employee))" />
        </td>
        <td>
            <TextInput ColumnName="FirstName" Value="@employee.FirstName" IsEditMode="@employee.IsEditMode" RowID="@employee.RowID"  
            ValueChanged="@((object newValue) => OnFirstNameValueChanged(newValue, employee))" 
            />
        </td>
        <td>
            <TextInput ColumnName="MiddleName" Value="@employee.MiddleName" IsEditMode="@employee.IsEditMode" RowID="@employee.RowID"
            ValueChanged="@((object newValue) => OnMiddleNameValueChanged(newValue, employee))" 
            />
        </td>
        <td>
            <TextInput ColumnName="LastName" Value="@employee.LastName" IsEditMode="@employee.IsEditMode" RowID="@employee.RowID"
            ValueChanged="@((object newValue) => OnLastNameValueChanged(newValue, employee))" 
            />
        </td>
        <td>
            @* <DateOnlyPicker ColumnName="DateOfBirth" Value="@employee.DateOfBirth" IsEditMode="@employee.IsEditMode" RowID="@employee.RowID"
            /> *@

            <DateOnlyPicker ColumnName="DateOfBirth" Value="@employee.DateOfBirth" IsEditMode="@employee.IsEditMode" RowID="@employee.RowID"
            ValueChanged="@((DateOnly? newValue) => OnDateOfBirthValueChanged(newValue, employee))" 
            />

        </td>
        <td>
            <DropdownList 
                Items="_countries" 
                ColumnName="CountryID" 
                Value="@employee.CountryID" 
                OptionIDFieldName="ID" 
                OptionValueFieldName="Name" 
                IsEditMode="@employee.IsEditMode"
                RowID="@employee.RowID"
                ValueChanged="@((object newValue) => OnDropdownValueChanged(newValue, employee))" 
                />
        </td>
    </RowTemplate>
</TableGridInternals>

@* <TableGrid Title="Employees" AllowCellSelection="true">
    <TableSource Name="EmployeeDS" DataSource="@_employees" />
    <TableSource Name="CountryDS" DataSource="@_countries" />
    <TableNode DataSource="EmployeeDS">
        <TableColumn DataSourceName="EmployeeDS" FieldName="ID" Type="TextBox" Visible="false" />
        <TableColumn DataSourceName="EmployeeDS" FieldName="FirstName" Type="TextBox" HeaderName="First Name" />
        <TableColumn DataSourceName="EmployeeDS" FieldName="MiddleName" Type="TextBox" HeaderName="Middle Name" />
        <TableColumn DataSourceName="EmployeeDS" FieldName="LastName" Type="TextBox" HeaderName="Last Name" />
        <TableColumn DataSourceName="CountryDS" FieldName="CountryID" Type="DropdownList" DisplayFieldName="Name" DisplayFieldValue="ID" HeaderName="Country" />
    </TableNode>
</TableGrid>

<TableGrid 
    Title="Countries" 
    DataTable="@_countries" 
    HiddenColumnNames="@_hiddenCountryColumns" 
    HeaderNames="@_countryHeaderNames" 
    />
 *@
@code {

    //   [Inject] public ISessionTableService _sessionTableService { get; set; } = default!;

    private Dictionary<string, object> _dataSources = default!;
    private List<EmployeeVM> _employees = new List<EmployeeVM>();
    private List<CountryVM> _countries = new List<CountryVM>();
    private List<string>? _hiddenEmployeeColumns;
    private List<string>? _hiddenCountryColumns;
    private Dictionary<string, string>? _employeeHeaderNames;
    private Dictionary<string, string>? _countryHeaderNames;
    private EmployeeVM _employeeVM = new EmployeeVM();
    private CountryVM? _selectedCountry;

    protected override void OnParametersSet()
    {
        Console.WriteLine("TestTableGrid OnParametersSetAsync");
        //SessionManager.GetInstance(_sessionTableService);
        // Initialize _employees DataTable

        _employeeHeaderNames = new Dictionary<string, string>()
        {
            ["ID"] = "ID",
            ["FirstName"] = "First Name",
            ["MiddleName"] = "Middle Name",
            ["LastName"] = "Last Name",
            ["DateOfBirth"] = "Date of Birth",
            ["CountryID"] = "Country",
        };

        var employeeFaker = new Faker<EmployeeVM>()
           .RuleFor(e => e.ID, f => f.IndexFaker + 1)
           .RuleFor(e => e.RowID, f => f.IndexFaker + 1)
           .RuleFor(e => e.FirstName, f => f.Name.FirstName())
           .RuleFor(e => e.MiddleName, f => f.Name.FirstName().Substring(0, 1) + ".")
           .RuleFor(e => e.LastName, f => f.Name.LastName())
           .RuleFor(e => e.DateOfBirth, f => DateOnly.FromDateTime(f.Date.Past(50, DateTime.Now.AddYears(-18))))
           .RuleFor(e => e.CountryID, f => f.Random.Int(1, 2));

        var countryFaker = new Faker<CountryVM>()
        .RuleFor(e => e.RowID, f => f.IndexFaker + 1)
        .RuleFor(c => c.ID, f => f.IndexFaker + 1)
        .RuleFor(c => c.Name, f => f.Address.Country());

        for (int i = 0; i < 101; i++)
        {
            var employee = employeeFaker.Generate();
            _employees.Add(employee);
        }

        // Initialize and generate country data
        _countryHeaderNames = new Dictionary<string, string>()
        {
            ["ID"] = "ID",
            ["Name"] = "Country Name",
        };

        for (int i = 0; i < 101; i++)
        {
            var country = countryFaker.Generate();
            _countries.Add(country);
        }

        _hiddenEmployeeColumns = new List<string>();
        _hiddenEmployeeColumns.Add("AActions");
        _hiddenEmployeeColumns.Add("ID");

        _hiddenCountryColumns = new List<string>();
        _hiddenCountryColumns.Add("AActions");
        _hiddenCountryColumns.Add("ID");

        _dataSources = new Dictionary<string, object>()
        {
            ["EmployeeDS"] = _employees,    
            ["CountryDS"] = _countries    
        };

        _selectedCountry = new CountryVM();
        _selectedCountry = _countries[0];
    }

    private void OnDropdownValueChanged(object newValue, EmployeeVM employeeVM)
    {
        employeeVM.CountryID = Convert.ToInt32(newValue);
        // Update employee list

        var foundEmployee = _employees.FirstOrDefault(e => e.RowID == employeeVM.RowID);

        if (foundEmployee != null)
        {
            foundEmployee.CountryID = employeeVM.CountryID;
        }

        StateHasChanged();

    }

    private void OnFirstNameValueChanged(object newValue, EmployeeVM employeeVM)
    {
        employeeVM.FirstName = newValue?.ToString() ?? string.Empty;
        // Update employee list

        var foundEmployee = _employees.FirstOrDefault(e => e.RowID == employeeVM.RowID);

        if (foundEmployee != null)
        {
            foundEmployee.FirstName = employeeVM.FirstName;
        }

        StateHasChanged();

    }
    private void OnMiddleNameValueChanged(object newValue, EmployeeVM employeeVM)
    {
        employeeVM.MiddleName = newValue?.ToString() ?? string.Empty;
        // Update employee list

        var foundEmployee = _employees.FirstOrDefault(e => e.RowID == employeeVM.RowID);

        if (foundEmployee != null)
        {
            foundEmployee.MiddleName = employeeVM.MiddleName;
        }

        StateHasChanged();

    }

    private void OnLastNameValueChanged(object newValue, EmployeeVM employeeVM)
    {
        employeeVM.LastName = newValue?.ToString() ?? string.Empty;
        // Update employee list

        var foundEmployee = _employees.FirstOrDefault(e => e.RowID == employeeVM.RowID);

        if (foundEmployee != null)
        {
            foundEmployee.LastName = employeeVM.LastName;
        }

        StateHasChanged();

    }
    
    private void OnDateOfBirthValueChanged(DateOnly? newValue, EmployeeVM employeeVM)
    {
        employeeVM.DateOfBirth = newValue.GetValueOrDefault();

        // Update employee list

        var foundEmployee = _employees.FirstOrDefault(e => e.RowID == employeeVM.RowID);

        if (foundEmployee != null)
        {
            foundEmployee.DateOfBirth = employeeVM.DateOfBirth;
        }

        StateHasChanged();
    }

    private void OnIDValueChanged(object newValue, EmployeeVM employeeVM)
    {
        employeeVM.ID = int.Parse(newValue?.ToString() ?? "0" );
        // Update employee list

        var foundEmployee = _employees.FirstOrDefault(e => e.RowID == employeeVM.RowID);

        if (foundEmployee != null)
        {
            foundEmployee.ID = employeeVM.ID;
        }

        StateHasChanged();

    }

    private void OnItemsChanged(IEnumerable<EmployeeVM> updatedItems)
    {
        _employees = updatedItems.ToList();
    }

    public interface IActions
    {
        public bool IsEditMode { get; set; }    
        public bool IsVisible { get; set; }    

    }

    public class Employee
    { 
        public int ID { get; set; }
        public string FirstName { get; set; } = default!;
        public string MiddleName { get; set; } = default!;
        public string LastName { get; set; } = default!;
        public DateOnly DateOfBirth { get; set; } = default!;
        public int CountryID { get; set; } 
    }

    public class Country
    {
        public int ID { get; set; }
        public string Name { get; set; } = default!;
    }

    public class DataSource<T>
    {
        public string DataSourceName { get; set; } = default!;
        public List<T> DataSourceList { get; set; } = default!;
    }

    public class EmployeeVM : Employee, IActions, IValidatableObject, ICloneable<EmployeeVM>, IViewModel<Employee, IActions, EmployeeVM>
    {
        private List<EmployeeVM> _employees = new List<EmployeeVM>(); // Initialize the list
        public int RowID { get; set; } // Integer property to indicate row ID
        public bool IsEditMode { get; set; } // Boolean property to indicate editing mode
        public bool IsVisible { get; set; } // Boolean property to indicate editing mode

        public EmployeeVM() { }

        public EmployeeVM(Employee model)
        {
            ID = model.ID;
            FirstName = model.FirstName;
            MiddleName = model.MiddleName;
            LastName = model.LastName;
            DateOfBirth = model.DateOfBirth;
            CountryID = model.CountryID;
        }

        public EmployeeVM(EmployeeVM modelVM)
        {
            IsEditMode = modelVM.IsEditMode;
            IsVisible = modelVM.IsVisible;
            RowID = modelVM.RowID;
            ID = modelVM.ID;
            FirstName = modelVM.FirstName;
            MiddleName = modelVM.MiddleName;
            LastName = modelVM.LastName;
            FirstName = modelVM.FirstName;
            DateOfBirth = modelVM.DateOfBirth;
            CountryID = modelVM.CountryID;
        }

        public EmployeeVM Clone()
        {
            return new EmployeeVM
                {
                    IsEditMode = this.IsEditMode,
                    IsVisible = this.IsVisible,
                    RowID = this.RowID,
                    ID = this.ID,
                    FirstName = this.FirstName,
                    MiddleName = this.MiddleName,
                    LastName = this.LastName,
                    DateOfBirth = this.DateOfBirth,
                    CountryID = this.CountryID
                };
        }

        public void SetList(List<EmployeeVM> items)
        {
            _employees = items;
        }

        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Ensure _clientVMEntryList is set before calling Validate
            if (_employees == null)
            {
                // Log or handle the situation where _clientVMEntryList is not set
                yield break; // Exit the validation early
            }

            // Implement your custom validation logic here
            //if (!IsEditing && AlreadyExists(Name, ID)) // Check existence only in editing mode
            //{
            //    yield return new ValidationResult("Name already exists.", new[] { nameof(Name) });
            //}
        }

        private bool AlreadyExists(string name, int currentItemId)
        {
            bool alreadyExists = false;

            if (name != null)
            {
                // Exclude the current item from the search
                var foundItem = _employees.FirstOrDefault(p => p.FirstName == name && p.ID != currentItemId);
                alreadyExists = foundItem != null;
            }

            return alreadyExists;
        }

        public async Task<EmployeeVM> FromModel(Employee model)
        {
            try
            {
                if (model != null)
                {
                    await Task.Run(() =>
                    {
                        ID = model.ID;
                        FirstName = model.FirstName;
                        MiddleName = model.MiddleName;
                        LastName = model.LastName;
                        DateOfBirth = model.DateOfBirth;
                        CountryID = model.CountryID;
                    });

                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("FromModel(Employee model, Dictionary<string, object> serviceList): {0}\r\n{1}", ex.Message, ex.StackTrace);
            }

            return this;
        }

        public Employee ToNewModel()
        {
            return new Employee
                {
                    ID = this.ID,
                    FirstName = this.FirstName,
                    MiddleName = this.MiddleName,
                    LastName = this.LastName,
                    DateOfBirth = this.DateOfBirth,
                    CountryID = this.CountryID
                };
        }

        public IActions ToNewIModel()
        {
            return new EmployeeVM
                {
                    IsEditMode = this.IsEditMode,
                    IsVisible = this.IsVisible,
                    RowID = this.RowID,
                    ID = this.ID,
                    FirstName = this.FirstName,
                    MiddleName = this.MiddleName,
                    LastName = this.LastName,
                    DateOfBirth = this.DateOfBirth,
                    CountryID = this.CountryID
                };
        }

        public async Task<EmployeeVM> SetEditMode(EmployeeVM modelVM, bool isEditMode)
        {
            modelVM.IsEditMode = isEditMode;
            await Task.CompletedTask;
            return modelVM;
        }

        public async Task<EmployeeVM> SaveModelVM(EmployeeVM modelVM)
        {
            modelVM.IsEditMode = false;
            await Task.CompletedTask;
            return modelVM;
        }

        public async Task<EmployeeVM> SaveModelVMToNewModelVM(EmployeeVM modelVM)
        {
            var newEmployee = new EmployeeVM()
            {
                RowID = modelVM.RowID,
                IsEditMode = modelVM.IsEditMode,
                IsVisible = modelVM.IsVisible,
                ID = modelVM.ID,
                FirstName = modelVM.FirstName,
                MiddleName = modelVM.MiddleName,
                LastName = modelVM.LastName,
                DateOfBirth = modelVM.DateOfBirth,
                CountryID = modelVM.CountryID
            };

            await Task.CompletedTask;

            return newEmployee;
        }

        public async Task<IEnumerable<EmployeeVM>> AddItemToList(IEnumerable<EmployeeVM> modelVMList, EmployeeVM newModelVM)
        {
            var list = modelVMList.ToList();

            RowID = list.Count() + 1;
            newModelVM.RowID = RowID;

            list.Add(newModelVM);

            await Task.CompletedTask;

            return list;
        }

        public async Task<IEnumerable<EmployeeVM>> UpdateList(IEnumerable<EmployeeVM> modelVMList, EmployeeVM updatedModelVM, bool isAdding)
        {
            EmployeeVM? modelVM = null;

            if (isAdding)
            {
                var list   = modelVMList.ToList();
                list.Remove(updatedModelVM);

                modelVMList = list;
            }
            else
            {
                modelVM = modelVMList.FirstOrDefault(e => e.ID == updatedModelVM.ID);

                if (modelVM != null)
                {
                    modelVM.IsEditMode = updatedModelVM.IsEditMode;
                    modelVM.IsVisible = updatedModelVM.IsVisible;
                    modelVM.ID = updatedModelVM.ID;
                    modelVM.FirstName = updatedModelVM.FirstName;
                    modelVM.MiddleName = updatedModelVM.MiddleName;
                    modelVM.LastName = updatedModelVM.LastName;
                    modelVM.DateOfBirth = updatedModelVM.DateOfBirth;
                    modelVM.CountryID = updatedModelVM.CountryID;
                }
            }


            await Task.CompletedTask;

            return modelVMList;
        }

        public async Task<IEnumerable<EmployeeVM>> DeleteItemFromList(IEnumerable<EmployeeVM> modelVMList, EmployeeVM deletedModelVM)
        {
            var list = modelVMList.ToList();

            var isDeleted = list.Remove(deletedModelVM);

            //TODO: sol: Add logic here for deleted and not deleted conditions
            if (isDeleted){ }
            else { }

            await Task.CompletedTask;

            return list;
        }

    }

    public class CountryVM : Country, IActions, IValidatableObject, ICloneable<CountryVM>, IViewModel<Country, IActions, CountryVM>
    {
        private List<CountryVM> _countries = new List<CountryVM>(); // Initialize the list
        public int RowID { get; set; } // Integer property to indicate row ID
        public bool IsEditMode { get; set; } // Boolean property to indicate editing mode
        public bool IsVisible { get; set; } // Boolean property to indicate editing mode

        public CountryVM() { }
        public CountryVM(Country model)
        {
            ID = model.ID;
            Name = model.Name;
        }

        public CountryVM(CountryVM modelVM)
        {
            IsEditMode = modelVM.IsEditMode;
            IsVisible = modelVM.IsVisible;
            RowID = modelVM.RowID;
            ID = modelVM.ID;
            Name = modelVM.Name;
        }
        public CountryVM Clone()
        {
            return new CountryVM
                {
                    IsEditMode = this.IsEditMode,
                    IsVisible = this.IsVisible,
                    RowID = this.RowID,
                    ID = this.ID,
                    Name = this.Name,
                };
        }

        public void SetList(List<CountryVM> items)
        {
            _countries = items;
        }

        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Ensure _clientVMEntryList is set before calling Validate
            if (_countries == null)
            {
                // Log or handle the situation where _clientVMEntryList is not set
                yield break; // Exit the validation early
            }

            // Implement your custom validation logic here
            //if (!IsEditing && AlreadyExists(Name, ID)) // Check existence only in editing mode
            //{
            //    yield return new ValidationResult("Name already exists.", new[] { nameof(Name) });
            //}
        }

        private bool AlreadyExists(string name, int currentItemId)
        {
            bool alreadyExists = false;

            if (name != null)
            {
                // Exclude the current item from the search
                var foundItem = _countries.FirstOrDefault(p => p.Name == name && p.ID != currentItemId);
                alreadyExists = foundItem != null;
            }

            return alreadyExists;
        }
        public async Task<CountryVM> FromModel(Country model)
        {
            try
            {
                if (model != null)
                {
                    await Task.Run(() =>
                    {
                        ID = model.ID;
                        Name = model.Name;
                    });

                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("FromModel(Country model, Dictionary<string, object> serviceList): {0}\r\n{1}", ex.Message, ex.StackTrace);
            }

            return this;
        }
        public Country ToNewModel()
        {
            return new Country
                {
                    ID = this.ID,
                    Name = this.Name,
                };
        }

        public IActions ToNewIModel()
        {
            return new CountryVM
                {
                    IsEditMode = this.IsEditMode,
                    IsVisible = this.IsVisible,
                    RowID = this.RowID,
                    ID = this.ID,
                    Name = this.Name,
                };
        }

        public async Task<CountryVM> SetEditMode(CountryVM modelVM, bool isEditMode)
        {
            modelVM.IsEditMode = isEditMode;
            await Task.CompletedTask;
            return modelVM;
        }

        public async Task<CountryVM> SaveModelVM(CountryVM modelVM)
        {
            modelVM.IsEditMode = false;
            await Task.CompletedTask;

            return modelVM;
        }

        public async Task<CountryVM> SaveModelVMToNewModelVM(CountryVM modelVM)
        {
            var newModelVM = new CountryVM()
                {
                    IsEditMode = modelVM.IsEditMode,
                    IsVisible = modelVM.IsVisible,
                    RowID = modelVM.RowID,
                    ID = modelVM.ID,
                    Name = modelVM.Name,
                };

            await Task.CompletedTask;

            return newModelVM;
        }

        public async Task<IEnumerable<CountryVM>> AddItemToList(IEnumerable<CountryVM> modelVMList, CountryVM newModelVM)
        {
            var list = modelVMList.ToList();

            RowID = list.Count() + 1;
            newModelVM.RowID = RowID;

            list.Add(newModelVM);

            await Task.CompletedTask;

            return list;
        }

        public async Task<IEnumerable<CountryVM>> UpdateList(IEnumerable<CountryVM> modelVMList, CountryVM updatedModelVM, bool isAdding)
        {
            CountryVM? modelVM = null;

            if (isAdding)
            {
                var list = modelVMList.ToList();
                list.Remove(updatedModelVM);
                modelVMList = list;
            }
            else
            { 
                modelVM = modelVMList.FirstOrDefault(e => e.ID == updatedModelVM.ID);

                if (modelVM != null)
                {
                    modelVM.IsEditMode = updatedModelVM.IsEditMode;
                    modelVM.IsVisible = updatedModelVM.IsVisible;
                    modelVM.RowID = updatedModelVM.RowID;
                    modelVM.ID = updatedModelVM.ID;
                    modelVM.Name = updatedModelVM.Name;
                }

            }
            
            await Task.CompletedTask;

            return modelVMList;
        }

        public async Task<IEnumerable<CountryVM>> DeleteItemFromList(IEnumerable<CountryVM> modelVMList, CountryVM deletedModelVM)
        {
            var list = modelVMList.ToList();

            var isDeleted = list.Remove(deletedModelVM);

            //TODO: sol: Add logic here for deleted and not deleted conditions
            if (isDeleted) { }
            else { }

            await Task.CompletedTask;

            return list;
        }
    }
}

@page "/test-table-grid"
@rendermode InteractiveServer

@using Blazor.Tools.BlazorBundler.Entities
@using Blazor.Tools.BlazorBundler.Interfaces
@using Blazor.Tools.BlazorBundler.Components.Grid
@using Bogus
@using System.Data
@using System.ComponentModel.DataAnnotations

@inject NavigationManager Navigation

<PageTitle>Test Table Grid</PageTitle>

<h1>Testing Sample Table Grid Component</h1>
<TableGridInternals TModel="Employee" TModelVM="EmployeeVM" ModelVM="_employeeVM" TIModel="IActions" Items="_employees" 
    DataSources="@_dataSources" Context="employee">
    <StartContent>
        <h2>Employee List</h2>
    </StartContent>
    <TableHeader>
@*         <th>ID</th> *@
        <th>First Name</th>
        <th>Middle Name</th>
        <th>Last Name</th>
        <th>Country</th>
    </TableHeader>
    <RowTemplate>
        @* <td><NumberInput ColumnName="ID" Value="@employee.ID" /></td> *@
        <td><TextInput ColumnName="FirstName" Value="@employee.FirstName" IsEditMode="@employee.IsEditMode" /></td>
        <td><TextInput ColumnName="MiddleName" Value="@employee.MiddleName" IsEditMode="@employee.IsEditMode" /></td>
        <td><TextInput ColumnName="LastName" Value="@employee.LastName" IsEditMode="@employee.IsEditMode" /></td>
        <td>
            <DropdownList 
                Items="_countries" 
                ColumnName="CountryID" 
                Value="@employee.CountryID" 
                OptionIDFieldName="ID" 
                OptionValueFieldName="Name" 
                IsEditMode="@employee.IsEditMode"
                          ValueChanged="@((object newValue) => OnDropdownValueChanged(newValue, employee))" />
        </td>
    </RowTemplate>
</TableGridInternals>

@* <TableGrid Title="Employees" AllowCellSelection="true">
    <TableSource Name="EmployeeDS" DataSource="@_employees" />
    <TableSource Name="CountryDS" DataSource="@_countries" />
    <TableNode DataSource="EmployeeDS">
        <TableColumn DataSourceName="EmployeeDS" FieldName="ID" Type="TextBox" Visible="false" />
        <TableColumn DataSourceName="EmployeeDS" FieldName="FirstName" Type="TextBox" HeaderName="First Name" />
        <TableColumn DataSourceName="EmployeeDS" FieldName="MiddleName" Type="TextBox" HeaderName="Middle Name" />
        <TableColumn DataSourceName="EmployeeDS" FieldName="LastName" Type="TextBox" HeaderName="Last Name" />
        <TableColumn DataSourceName="CountryDS" FieldName="CountryID" Type="DropdownList" DisplayFieldName="Name" DisplayFieldValue="ID" HeaderName="Country" />
    </TableNode>
</TableGrid>

<TableGrid 
    Title="Countries" 
    DataTable="@_countries" 
    HiddenColumnNames="@_hiddenCountryColumns" 
    HeaderNames="@_countryHeaderNames" 
    />
 *@
@code {

    //   [Inject] public ISessionTableService _sessionTableService { get; set; } = default!;

    private Dictionary<string, object> _dataSources = default!;
    private List<Employee> _employees = new List<Employee>();
    private List<Country> _countries = new List<Country>();
    private List<string>? _hiddenEmployeeColumns;
    private List<string>? _hiddenCountryColumns;
    private Dictionary<string, string>? _employeeHeaderNames;
    private Dictionary<string, string>? _countryHeaderNames;
    private EmployeeVM _employeeVM = new EmployeeVM();

    protected override void OnParametersSet()
    {
        Console.WriteLine("TestTableGrid OnParametersSetAsync");
        //SessionManager.GetInstance(_sessionTableService);
        // Initialize _employees DataTable

        _employeeHeaderNames = new Dictionary<string, string>()
        {
            ["ID"] = "ID",
            ["FirstName"] = "First Name",
            ["MiddleName"] = "Middle Name",
            ["LastName"] = "Last Name",
            ["CountryID"] = "Country",
        };

        var employeeFaker = new Faker<Employee>()
           .RuleFor(e => e.ID, f => f.IndexFaker + 1)
           .RuleFor(e => e.FirstName, f => f.Name.FirstName())
           .RuleFor(e => e.MiddleName, f => f.Name.FirstName().Substring(0, 1) + ".")
           .RuleFor(e => e.LastName, f => f.Name.LastName())
           .RuleFor(e => e.CountryID, f => f.Random.Int(1, 2));

        var countryFaker = new Faker<Country>()
        .RuleFor(c => c.ID, f => f.IndexFaker + 1)
        .RuleFor(c => c.Name, f => f.Address.Country());

        for (int i = 0; i < 101; i++)
        {
            var employee = employeeFaker.Generate();
            _employees.Add(employee);
        }

        // Initialize and generate country data
        _countryHeaderNames = new Dictionary<string, string>()
        {
            ["ID"] = "ID",
            ["Name"] = "Country Name",
        };

        for (int i = 0; i < 101; i++)
        {
            var country = countryFaker.Generate();
            _countries.Add(country);
        }

        _hiddenEmployeeColumns = new List<string>();
        _hiddenEmployeeColumns.Add("AActions");
        _hiddenEmployeeColumns.Add("ID");

        _hiddenCountryColumns = new List<string>();
        _hiddenCountryColumns.Add("AActions");
        _hiddenCountryColumns.Add("ID");

        _dataSources = new Dictionary<string, object>()
        {
            ["EmployeeDS"] = _employees,    
            ["CountryDS"] = _countries    
        };


    }

    private void OnDropdownValueChanged(object newValue, Employee employee)
    {
        employee.CountryID = Convert.ToInt32(newValue);
        // Update employee list

        var foundEmployee = _employees.FirstOrDefault(e => e.ID == employee.ID);

        if (foundEmployee != null)
        {
            foundEmployee.CountryID = employee.CountryID;
        }

        StateHasChanged();

    }

    public interface IActions
    {
        public bool IsEditMode { get; set; }    

    }

    public class Employee: IActions
    {
        public bool IsEditMode { get; set; }
        public int ID { get; set; }
        public string FirstName { get; set; } = default!;
        public string MiddleName { get; set; } = default!;
        public string LastName { get; set; } = default!;
        public int CountryID { get; set; } 
    }

    public class Country : IActions
    {
        public bool IsEditMode { get; set; }
        public int ID { get; set; }
        public string Name { get; set; } = default!;
    }

    public class DataSource<T>
    {
        public string DataSourceName { get; set; } = default!;
        public List<T> DataSourceList { get; set; } = default!;
    }

    public class EmployeeVM : Employee, IValidatableObject, ICloneable<EmployeeVM>, IViewModel<Employee, IActions, EmployeeVM>
    {
        private List<Employee> _employees = new List<Employee>(); // Initialize the list
        public bool IsEditing { get; set; } // Boolean property to indicate editing mode

        public EmployeeVM() { }
        public EmployeeVM(Employee model)
        {
            IsEditMode = model.IsEditMode;
            ID = model.ID;
            FirstName = model.FirstName;
            MiddleName = model.MiddleName;
            LastName = model.LastName;
            CountryID = model.CountryID;
        }
        public EmployeeVM(EmployeeVM modelVM)
        {
            IsEditMode = modelVM.IsEditMode;
            ID = modelVM.ID;
            FirstName = modelVM.FirstName;
            MiddleName = modelVM.MiddleName;
            LastName = modelVM.LastName;
            FirstName = modelVM.FirstName;
            CountryID = modelVM.CountryID;
        }
        public EmployeeVM Clone()
        {
            return new EmployeeVM
                {
                    IsEditMode = this.IsEditMode,
                    ID = this.ID,
                    FirstName = this.FirstName,
                    MiddleName = this.MiddleName,
                    LastName = this.LastName,
                    CountryID = this.CountryID
                };
        }

        public void SetList(List<Employee> items)
        {
            _employees = items;
        }

        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Ensure _clientVMEntryList is set before calling Validate
            if (_employees == null)
            {
                // Log or handle the situation where _clientVMEntryList is not set
                yield break; // Exit the validation early
            }

            // Implement your custom validation logic here
            //if (!IsEditing && AlreadyExists(Name, ID)) // Check existence only in editing mode
            //{
            //    yield return new ValidationResult("Name already exists.", new[] { nameof(Name) });
            //}
        }

        private bool AlreadyExists(string name, int currentItemId)
        {
            bool alreadyExists = false;

            if (name != null)
            {
                // Exclude the current item from the search
                var foundItem = _employees.FirstOrDefault(p => p.FirstName == name && p.ID != currentItemId);
                alreadyExists = foundItem != null;
            }

            return alreadyExists;
        }
        public async Task<EmployeeVM> FromModel(Employee model)
        {
            try
            {
                if (model != null)
                {
                    await Task.Run(() =>
                    {
                        IsEditMode = model.IsEditMode;
                        ID = model.ID;
                        FirstName = model.FirstName;
                        MiddleName = model.MiddleName;
                        LastName = model.LastName;
                        CountryID = model.CountryID;
                    });

                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("FromModel(Employee model, Dictionary<string, object> serviceList): {0}\r\n{1}", ex.Message, ex.StackTrace);
            }

            return this;
        }
        public Employee ToNewModel()
        {
            return new Employee
                {
                    IsEditMode = this.IsEditMode,
                    ID = this.ID,
                    FirstName = this.FirstName,
                    MiddleName = this.MiddleName,
                    LastName = this.LastName,
                    CountryID = this.CountryID
                };
        }

        public IActions ToNewIModel()
        {
            return new Employee
                {
                    IsEditMode = this.IsEditMode,
                    ID = this.ID,
                    FirstName = this.FirstName,
                    MiddleName = this.MiddleName,
                    LastName = this.LastName,
                    CountryID = this.CountryID
                };
        }

        public async Task<Employee> SetEditMode(Employee model, bool isEditMode)
        {
            model.IsEditMode = isEditMode;
            await Task.CompletedTask;
            return model;
        }

        public async Task<Employee> SaveModel(Employee model)
        {
            model.IsEditMode = false;
            await Task.CompletedTask;
            return model;
        }

        public async Task<Employee> SaveModelToNewModel(Employee model)
        {
            var newEmployee = new Employee()
            {
                IsEditMode = model.IsEditMode,
                ID = model.ID,
                FirstName = model.FirstName,
                MiddleName = model.MiddleName,
                LastName = model.LastName,
                CountryID = model.CountryID
            };

            await Task.CompletedTask;

            return newEmployee;
        }

        public async Task<IEnumerable<Employee>> UpdateList(IEnumerable<Employee> modelList, Employee updatedModel)
        {
            Employee? updatedEmployee = null;

            updatedEmployee = modelList.FirstOrDefault(e => e.ID == updatedModel.ID);

            if(updatedEmployee != null)
            {
                updatedEmployee.IsEditMode = updatedModel.IsEditMode;
                updatedEmployee.ID = updatedModel.ID;
                updatedEmployee.FirstName = updatedModel.FirstName;
                updatedEmployee.MiddleName = updatedModel.MiddleName;
                updatedEmployee.LastName = updatedModel.LastName;
                updatedEmployee.CountryID = updatedModel.CountryID;
            }

            await Task.CompletedTask;

            return modelList;
        }

        public async Task<IEnumerable<Employee>> DeleteItemFromList(IEnumerable<Employee> modelList, Employee deletedModel)
        {
            var list = modelList.ToList();

            var isDeleted = list.Remove(deletedModel);

            //TODO: sol: Add logic here for deleted and not deleted conditions
            if (isDeleted){ }
            else { }

            await Task.CompletedTask;

            return list;
        }
    }
}

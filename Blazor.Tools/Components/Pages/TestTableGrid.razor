@page "/test-table-grid"
@rendermode InteractiveServer

@using Blazor.Tools.BlazorBundler.Entities
@using Blazor.Tools.BlazorBundler.Interfaces
@using Blazor.Tools.BlazorBundler.Components.Grid
@using Bogus
@using System.Data

@inject NavigationManager Navigation

<PageTitle>Test Table Grid</PageTitle>

<h1>Testing Sample Table Grid Component</h1>
<TableGridInternals TItem="Employee" Items="_employees" DataSources="@_dataSources" Context="employee">
    <StartContent>
        <h2>Employee List</h2>
    </StartContent>
    <TableHeader>
        <th>ID</th>
        <th>First Name</th>
        <th>Middle Name</th>
        <th>Last Name</th>
        <th>Country ID</th>
    </TableHeader>
    <RowTemplate>
        <td><NumberInput ColumnName="ID" Value="@employee.ID" /></td>
        <td><TextInput ColumnName="FirstName" Value="@employee.FirstName" /></td>
        <td><TextInput ColumnName="MiddleName" Value="@employee.MiddleName" /></td>
        <td><TextInput ColumnName="LastName" Value="@employee.LastName" /></td>
        <td><NumberInput ColumnName="CountryID" Value="@employee.CountryID" /></td>
    </RowTemplate>
</TableGridInternals>

@* <TableGrid Title="Employees" AllowCellSelection="true">
    <TableSource Name="EmployeeDS" DataSource="@_employees" />
    <TableSource Name="CountryDS" DataSource="@_countries" />
    <TableNode DataSource="EmployeeDS">
        <TableColumn DataSourceName="EmployeeDS" FieldName="ID" Type="TextBox" Visible="false" />
        <TableColumn DataSourceName="EmployeeDS" FieldName="FirstName" Type="TextBox" HeaderName="First Name" />
        <TableColumn DataSourceName="EmployeeDS" FieldName="MiddleName" Type="TextBox" HeaderName="Middle Name" />
        <TableColumn DataSourceName="EmployeeDS" FieldName="LastName" Type="TextBox" HeaderName="Last Name" />
        <TableColumn DataSourceName="CountryDS" FieldName="CountryID" Type="DropdownList" DisplayFieldName="Name" DisplayFieldValue="ID" HeaderName="Country" />
    </TableNode>
</TableGrid>

<TableGrid 
    Title="Countries" 
    DataTable="@_countries" 
    HiddenColumnNames="@_hiddenCountryColumns" 
    HeaderNames="@_countryHeaderNames" 
    />
 *@
@code {

 //   [Inject] public ISessionTableService _sessionTableService { get; set; } = default!;

    private Dictionary<string, object> _dataSources = default!;
    private List<Employee> _employees = new List<Employee>();
    private List<Country> _countries = new List<Country>();
    private List<string>? _hiddenCountryColumns;
    private Dictionary<string, string>? _employeeHeaderNames;
    private Dictionary<string, string>? _countryHeaderNames;


    protected override void OnParametersSet()
    {
        Console.WriteLine("TestTableGrid OnParametersSetAsync");
        //SessionManager.GetInstance(_sessionTableService);
        // Initialize _employees DataTable

        _employeeHeaderNames = new Dictionary<string, string>()
        {
            ["ID"] = "ID",
            ["FirstName"] = "First Name",
            ["MiddleName"] = "Middle Name",
            ["LastName"] = "Last Name",
            ["CountryID"] = "Country",
        };

        var employeeFaker = new Faker<Employee>()
           .RuleFor(e => e.ID, f => f.IndexFaker + 1)
           .RuleFor(e => e.FirstName, f => f.Name.FirstName())
           .RuleFor(e => e.MiddleName, f => f.Name.FirstName().Substring(0, 1) + ".")
           .RuleFor(e => e.LastName, f => f.Name.LastName())
           .RuleFor(e => e.CountryID, f => f.Random.Int(1, 2));

        var countryFaker = new Faker<Country>()
        .RuleFor(c => c.ID, f => f.IndexFaker + 1)
        .RuleFor(c => c.Name, f => f.Address.Country());

        for (int i = 0; i < 101; i++)
        {
            var employee = employeeFaker.Generate();
            _employees.Add(employee);
        }

        // Initialize and generate country data
        _countryHeaderNames = new Dictionary<string, string>()
        {
            ["ID"] = "ID",
            ["Name"] = "Country Name",
        };

        for (int i = 0; i < 101; i++)
        {
            var country = countryFaker.Generate();
            _countries.Add(country);
        }

        _hiddenCountryColumns = new List<string>();
        _hiddenCountryColumns.Add("ID");

        _dataSources = new Dictionary<string, object>()
        {
            ["EmployeeDS"] = _employees,    
            ["CountryDS"] = _countries    
        };
    }

    public class Employee
    {
        public int ID { get; set; }
        public string FirstName { get; set; } = default!;
        public string MiddleName { get; set; } = default!;
        public string LastName { get; set; } = default!;
        public int CountryID { get; set; } 
    }

    public class Country
    {
        public int ID { get; set; }
        public string Name { get; set; } = default!;
    }

    public class DataSource<T>
    {
        public string DataSourceName { get; set; } = default!;
        public List<T> DataSourceList { get; set; } = default!;
    }
}

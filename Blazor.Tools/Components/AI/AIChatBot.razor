@using Microsoft.ML
@using Microsoft.ML.Data

<h3>AI Chatbot</h3>
<div class="row">
    <div class="column">
        <button class="btn btn-primary" @onclick="TrainAI">Train AI</button>
    </div>
</div>

<div class="row">
    <div class="chat-container">
        @foreach (var message in messages)
        {
            <div class="message @(message.IsBotMessage ? "bot-message" : "user-message")">
                @message.Text
            </div>
        }
    </div>
</div>
<div class="row">
    <div class="column">
        <input @bind="userInput" type="text" />
    </div>
    <div class="column">
        <button @onclick="SendMessage">Send</button>
    </div>
</div>

@code {
    [Parameter] public string ConnectionString { get; set; }

    private string userInput;
    private List<Message> messages = new List<Message>();
    private PredictionEngine<SentimentData, SentimentPrediction> predictionEngine;
    private AIDataAccess _da;

    protected override async Task OnInitializedAsync()
    {
        // Initialize ML.NET model
        var mlContext = new MLContext();
        _da = new AIDataAccess(ConnectionString);

        // Retrieve model file from database
        var modelData = await _da.GetModelFileAsync("SentimentAnalysisModel.zip");
        if (modelData != null)
        {
            using var modelStream = new MemoryStream(modelData);
            var model = mlContext.Model.Load(modelStream, out _);
            predictionEngine = mlContext.Model.CreatePredictionEngine<SentimentData, SentimentPrediction>(model);
        }
        else
        {
            Console.WriteLine("Model file not found in database.");
        }

        await base.OnInitializedAsync();
    }

    private async Task SendMessage()
    {
        messages.Add(new Message { Text = userInput, IsBotMessage = false });
        StateHasChanged();

        // Use ML.NET model to predict sentiment
        var prediction = predictionEngine.Predict(new SentimentData { SentimentText = userInput });

        var response = prediction.Prediction ? "Positive sentiment" : "Negative sentiment";
        messages.Add(new Message { Text = response, IsBotMessage = true });
        StateHasChanged();

        userInput = string.Empty;

        // Store user input in database for future training
        var trainingData = new TrainingData { SentimentText = userInput, Sentiment = prediction.Prediction };
        await _da.InsertTrainingDataAsync(trainingData);
    }

    private async Task TrainAI()
    {
        try
        {
            // Training logic
            var mlContext = new MLContext();
            var dataPath = "Data/sentiment-data.csv";
            var modelPath = "MLModels/SentimentAnalysisModel.zip";

            // Load data
            var data = mlContext.Data.LoadFromTextFile<SentimentData>(dataPath, separatorChar: ',', hasHeader: true);

            // Data processing pipeline
            var dataProcessPipeline = mlContext.Transforms.Text.FeaturizeText("Features", nameof(SentimentData.SentimentText))
                                        .Append(mlContext.Transforms.CopyColumns("Label", nameof(SentimentData.Sentiment)));

            // Choose a learning algorithm
            var trainer = mlContext.BinaryClassification.Trainers.SdcaLogisticRegression(labelColumnName: "Label", featureColumnName: "Features");

            var trainingPipeline = dataProcessPipeline.Append(trainer);

            // Train the model
            var trainedModel = trainingPipeline.Fit(data);

            // Save the model to a memory stream
            using var memoryStream = new MemoryStream();
            mlContext.Model.Save(trainedModel, data.Schema, memoryStream);

            // Store the model in the database
            var fileName = "SentimentAnalysisModel.zip"; // Adjust filename as needed
            await _da.InsertModelFileAsync(fileName, memoryStream.ToArray());

            // Provide feedback or update UI after training
            messages.Add(new Message { Text = "Model trained successfully!", IsBotMessage = true });
            StateHasChanged();

            // Optionally, wait for a short delay before clearing the message
            await Task.Delay(3000); // Adjust delay time as needed

            // Clear the training message
            messages.RemoveAll(msg => msg.Text == "Model trained successfully!");
            StateHasChanged();

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: {0}", ex.Message);
        }
    }
    
}
